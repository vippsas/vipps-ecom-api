swagger: '2.0'
info:
  description: >+

    **IMPORTANT!** We are preparing the documentation and will update this site
    regularly. This notice will remain until the site is ready for initial use.
    Please refer to our current [portal for
    developers](https://www.vipps.no/bedrift/utvikler) in the meantime.

    # Vipps API Developer Documentation

    Vipps eCommerce API gives merchant a great control over Vipps payment
    lifecycle. It gives the possibility to initiate payment from mobile app and
    webshop. It also enables the merchant to affect payment flow by utilizing
    functions like payment reservation, capture, cancellation and refunding.


    # Use case scenarios

    In order to ease the integration with Vipps and get a better understanding
    of API functionality and usage of some typical scenarios are presented.

    # API Calls flow

    This section will explain how merchants can start using Vipps APIs and get
    access to API credentials.

    During the merchantâ€™s onboarding process in Vipps, the merchant receives a
    username and a password to login into the Merchant Developer Portal (manual
    to use merchant developer portal can be found here). Once logged in to the
    developer portal, the merchant needs to register an application to generate
    a JWT access token and use the token in the authorization header of the
    request. The diagram below shows the integration flow between merchant and
    Vipps server.

    All communication with the Vipps ecommerce API has to be authenticated via
    JWT access token. To get this access token and use it in API calls merchant
    should follow the steps below:
     * Merchant logs into the Developer portal and registers an application that will consume Vipps APIs. On successful registration, it will receive application credentials (ClientId and ClientSecret).
     * Merchant application uses the clientid and clientsecret to get a JWT access token from APIM. JWT access token is a base 64 encoded string value that needs to be used as a bearer token in the request header.
     * Merchant application will have to use this JWT access token, APIM subscription key and App Id(clientid) along with other request parameters while calling a Vipps API.
     * APIM validates the JWT access token and subscription key. If the token is invalid it responds with 401 unauthorized while if it is valid, the request is forwarded to Vipps. Vipps process the request and produce a corresponding response which is sent back to merchant application via APIM.
    # Idempotency

    All API requests in Vipps eCommerce can be retried without any side effects
    by providing idempotent key in a header of  the request. For example, in
    case the request fails because of network error it can safely be retried
    with the same idempotent key. Idempotent key is generated by merchant.
      ```
      {
        -H "X-Request-Id: slvnwdcweofjwefweklfwelf"
      }
      ```

    # Authentication

    Every API call is authenticated and authorized based on the application
    Authorization token (JWT Bearer token) and APIM subscription key
    (Ocp-Apim-Subscription-Key). In addition, APP Id need to be provided in
    request header in order to authenticate the application the merchant has
    registered. Following headers are required to be there in every API request
    to successfully authenticate every API call.

      | **Header Name** | **Header Value** | **Description** |
      | :-------------------------- | :--------------------------- | :--------------------------------------------- |
      | Authorization | Bearer 'jwt_access_token'' | type: Authorization token<br>Value: Access token is obtained by registering merchant backend application in Merchant Developer Portal. |
      | Ocp-ApimSubscription-Key | Base 64 encoded string | Subscription key for eCommerce product.<br>This can be found in User Profile page on Merchant developer portal after merchant account is created |

  version: '1.0'
  title: Vipps eCommerce APIs
host: apitest.vipps.no
tags:
  - name: Authorization Service
    description: Authorization Service
  - name: oneclick-payment-with-vipps-controller
    description: Oneclick Payment With Vipps Controller
paths:
  /accesstoken/get:
    post:
      tags:
        - Authorization Service
      summary: Fetch authorization token
      parameters:
        - name: client_id
          in: header
          description: Client ID received when merchant registered the application
          required: false
          type: GUID
        - name: client_secret
          in: header
          description: Client Secret received when merchant registered the application
          required: false
          type: string
        - name: ocp-apim-subscription-key
          in: header
          description: >-
            Subscription key for eCommerce product. This can be found in User
            Profile page on Merchant developer portal after merchant account is
            created
          required: false
          type: string
      description: >-
        Authorization token API endpoint helps to get the JWT Bearer token that
        needs to be passed in every API request in the authorization header. The
        merchant application use the API to get a JWT access token. JWT access
        token is a base 64 encoded string value that must be aquire first before
        making any Vipps api calls
      operationId: fetchAuthorizationTokenUsingPost
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AuthorizationTokenResponse'
        '400':
          description: Bad request (Missing a required parameter or Bad request formats)
        '401':
          description: Unauthorized
        '402':
          description: Payment Failed
        '403':
          description: Request Forbidden
        '404':
          description: Resource Not Found
        '405':
          description: Request method not supported
        '415':
          description: Unsupported media type
        '500':
          description: Something went wrong from Vipps Server side
  '/[consetRemovalPrefix]/v2/consents/{userId}':
    delete:
      tags:
        - oneclick-payment-with-vipps-controller
      summary: Remove User Consent (for express checkout)
      description: >-
        This API allows Vipps to send consent removal request to merchant. After
        this the merchant is obliged to remove the user details from merchant
        system permanently, as per the GDPR guidelines.
      operationId: removeUserConsentUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: userId
          in: path
          description: userId
          required: true
          type: string
      responses:
        '200':
          description: Remove User Consent (for express checkout)
        '400':
          description: Bad request (Missing a required parameter or Bad request formats)
        '401':
          description: Unauthorized
        '403':
          description: Request Forbidden
        '404':
          description: Resource Not Found
        '405':
          description: Request method not supported
        '415':
          description: Unsupported media type
        '500':
          description: Something went wrong from Vipps Server side
  '/[shippingDetailsPrefix]/v2/payments/{orderId}/shippingDetails':
    post:
      tags:
        - oneclick-payment-with-vipps-controller
      summary: Fetch Shipping Cost & Method
      description: >-
        This API call allows Vipps to get the shipping cost and method based on
        the provided address and product details. Primarily use of this service
        is meant for ecomm express checkout where Vipps needs to present
        shipping cost and method  to the vipps user. This service is to be
        implemented by merchants.
      operationId: fetchShippingCostUsingPOST
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          type: string
        - in: body
          name: fetchShippingCostAndMethod
          description: fetchShippingCostAndMethod
          required: true
          schema:
            $ref: '#/definitions/FetchShippingCostAndMethod'
      responses:
        '200':
          description: Fetch Shipping Cost & Method.
          schema:
            $ref: '#/definitions/FetchShippingCostResponse'
        '400':
          description: Bad request (Missing a required parameter or Bad request formats)
        '401':
          description: Unauthorized
        '402':
          description: Payment Failed
        '403':
          description: Request Forbidden
        '404':
          description: Resource Not Found
        '405':
          description: Request method not supported
        '415':
          description: Unsupported media type
        '500':
          description: Something went wrong from Vipps Server side
  /v2/payments:
    post:
      tags:
        - oneclick-payment-with-vipps-controller
      summary: Initiate Payment
      description: >-
        The API Call allows the merchants to initiate a payment flow by using
        Vipps.In order to identify sales channel payments are coming from, a
        merchantSerialNumber is used to distinguish between them. Please note
        that a single payment is uniquely identified by a composite of
        merchantApplicationId (X-App-ID), merchantSerialNumber and orderId. The
        Merchant provided orderId must be unique per sales channel. Once
        successfully initiated the transaction in Vipps, it will give you the
        redirect URL in response which has to be used by the merchant to open
        the Vipps landing page. The landing page will have functionality to
        identify and differentiate request coming from mobile browser/desktop
        browser.
      operationId: initiatePaymentV3UsingPOST
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - in: body
          name: initiatePaymentCommandDto
          description: initiatePaymentCommandDto
          required: true
          schema:
            $ref: '#/definitions/InitiatePaymentCommandDto'
      responses:
        '202':
          description: Response for Initiate Payment
          schema:
            $ref: '#/definitions/InitiatePaymentV2Representation'
        '400':
          description: Bad request (Missing a required parameter or Bad request formats)
        '401':
          description: Unauthorized
        '402':
          description: Payment Failed
        '403':
          description: Request Forbidden
        '404':
          description: Resource Not Found
        '405':
          description: Request method not supported
        '415':
          description: Unsupported media type
        '500':
          description: Something went wrong from Vipps Server side
  '/v2/payments/{orderId}':
    post:
      tags:
        - oneclick-payment-with-vipps-controller
      summary: 'Callback : Transaction Update'
      description: >-
        This API allows Vipps to send the transaction details. During regular
        ecomm payment order and transaction details will be shared. During
        express checkout payment it will provide user details and shipping
        details addition to the order and transaction details.
      operationId: transactionUpdateCallbackForRegularPaymentUsingPOST
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          type: string
        - in: body
          name: expressCheckOutPaymentRequest
          description: expressCheckOutPaymentRequest
          required: true
          schema:
            $ref: '#/definitions/ExpressCheckOutPaymentRequest'
      responses:
        '200':
          description: 'Callback : Transaction Update'
        '400':
          description: Bad request (Missing a required parameter or Bad request formats)
        '401':
          description: Unauthorized
        '402':
          description: Payment Failed
        '403':
          description: Request Forbidden
        '404':
          description: Resource Not Found
        '405':
          description: Request method not supported
        '415':
          description: Unsupported media type
        '500':
          description: Something went wrong from Vipps Server side
  '/v2/payments/{orderId}/cancel':
    put:
      tags:
        - oneclick-payment-with-vipps-controller
      summary: Cancel Payment
      description: >-
        The API call allows merchant to cancel the reserved transaction, The API
        will not allow partial cancellation which has the consequence that
        partially captured transactions cannot be cancelled. Please note that in
        a case of communication errors during initiate payment service call
        between Vipps and PSP/Acquirer/Issuer; even in a case that customer has
        confirmed a payment, the payment will be cancelled by Vipps. Note this
        means you can not cancel a captured payment.
      operationId: cancelPaymentRequestUsingPUT
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          type: string
        - in: body
          name: paymentActionsRequest
          description: paymentActionsRequest
          required: true
          schema:
            $ref: '#/definitions/CancelPaymentActionRequest'
      responses:
        '200':
          description: Cancel payment response
          schema:
            $ref: '#/definitions/TransactionResponce'
        '400':
          description: Bad request (Missing a required parameter or Bad request formats)
        '401':
          description: Unauthorized
        '402':
          description: Payment Failed
        '403':
          description: Request Forbidden
        '404':
          description: Resource Not Found
        '405':
          description: Request method not supported
        '415':
          description: Unsupported media type
        '500':
          description: Something went wrong from Vipps Server side
  '/v2/payments/{orderId}/capture':
    post:
      tags:
        - oneclick-payment-with-vipps-controller
      summary: 'Capture Payment '
      description: >-
        The API call allows merchant to capture the reserved amount. Amount to
        capture cannot be higher than reserved. The API also allows capturing
        partial amount of the reserved amount. Partial capture can be called as
        many times as required so long there is reserved amount to capture.
        Transaction text is not optional and is used as a proof of delivery
        (tracking code, consignment number etc.). In a case of direct capture,
        both fund reservation and capture are executed in a single operation.
      operationId: capturePaymentUsingPOST
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          type: string
        - in: body
          name: paymentActionsRequest
          description: paymentActionsRequest
          required: true
          schema:
            $ref: '#/definitions/PaymentActionsRequest'
      responses:
        '200':
          description: Capture payment response
          schema:
            $ref: '#/definitions/TransactionResponce'
        '400':
          description: Bad request (Missing a required parameter or Bad request formats)
        '401':
          description: Unauthorized
        '402':
          description: Payment Failed
        '403':
          description: Request Forbidden
        '404':
          description: Resource Not Found
        '405':
          description: Request method not supported
        '415':
          description: Unsupported media type
        '500':
          description: Something went wrong from Vipps Server side
  '/v2/payments/{orderId}/details':
    get:
      tags:
        - oneclick-payment-with-vipps-controller
      summary: Get payment Details
      description: >-
        The API allows merchant to get the details of a payment transaction.
        Service call returns detailed transaction history of given payment where
        events are sorted by the time single transaction occurred.
      operationId: getPaymentDetailsUsingGET
      consumes:
        - application/json
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          type: string
      responses:
        '200':
          description: Get payment Details
          schema:
            $ref: '#/definitions/GetTransactionDetails'
        '400':
          description: Bad request (Missing a required parameter or Bad request formats)
        '401':
          description: Unauthorized
        '402':
          description: Payment Failed
        '403':
          description: Request Forbidden
        '404':
          description: Resource Not Found
        '405':
          description: Request method not supported
        '415':
          description: Unsupported media type
        '500':
          description: Something went wrong from Vipps Server side
  '/v2/payments/{orderId}/refund':
    post:
      tags:
        - oneclick-payment-with-vipps-controller
      summary: 'Refund Payment '
      description: >-
        The API allows a merchant to do a refund of already captured
        transaction. There is an option to do a partial refund of the captured
        amount. Refunded amount cannot be larger than captured. Timeframe for
        issuing a refund for a payment is 365 days from the date payment has
        been captured. If the refund payment service call is called after the
        refund timeframe, service call will respond with an error. Refunded
        funds will be transferred from the merchant account to the customer
        credit card that was used in payment flow. Pay attention that in order
        to perform refund, there must be enough funds at merchant settlements
        account.
      operationId: refundPaymentUsingPOST
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          type: string
        - in: body
          name: paymentActionsRequest
          description: paymentActionsRequest
          required: true
          schema:
            $ref: '#/definitions/PaymentActionsRequest'
      responses:
        '200':
          description: Refund payment response
          schema:
            $ref: '#/definitions/RefundTransactionResponce'
        '400':
          description: Bad request (Missing a required parameter or Bad request formats)
        '401':
          description: Unauthorized
        '402':
          description: Payment Failed
        '403':
          description: Request Forbidden
        '404':
          description: Resource Not Found
        '405':
          description: Request method not supported
        '415':
          description: Unsupported media type
        '500':
          description: Something went wrong from Vipps Server side
  '/v2/payments/{orderId}/status':
    get:
      tags:
        - oneclick-payment-with-vipps-controller
      summary: Get order status
      description: >-
        The API call allows the merchant to get the status of the last payment
        transaction. Primarily use of this service is meant for inApp where
        simple response to check order status is preferred.
      operationId: getOrderStatusUsingGET
      consumes:
        - application/json
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          type: string
      responses:
        '200':
          description: Get order status
          schema:
            $ref: '#/definitions/GetPaymentStatusResponse'
        '400':
          description: Bad request (Missing a required parameter or Bad request formats)
        '401':
          description: Unauthorized
        '402':
          description: Payment Failed
        '403':
          description: Request Forbidden
        '404':
          description: Resource Not Found
        '405':
          description: Request method not supported
        '415':
          description: Unsupported media type
        '500':
          description: Something went wrong from Vipps Server side
definitions:
  PaymentActionsRequest:
    type: object
    properties:
      merchantInfo:
        $ref: '#/definitions/MerchantInfoPayment'
      transaction:
        $ref: '#/definitions/Transaction'
  Address:
    type: object
    required:
      - addressLine1
      - city
      - country
      - zipCode
    properties:
      addressLine1:
        type: string
        description: Address Line 1
      addressLine2:
        type: string
        description: Address Line 2
      city:
        type: string
        description: City
      country:
        type: string
        description: 'Country,default=NO'
      zipCode:
        type: string
        description: Zip Code
  PaymentShippingDetails:
    type: object
    required:
      - shippingCost
      - shippingMethod
    properties:
      address:
        $ref: '#/definitions/Address'
      shippingCost:
        type: number
        format: double
        description: Shipping Cost
      shippingMethod:
        type: string
        description: Shipping method
  TransactionLogHistory:
    type: object
    properties:
      amount:
        type: integer
        format: int32
      operation:
        type: string
      requestId:
        type: string
      timeStamp:
        type: string
      transactionId:
        type: string
      transactionText:
        type: string
  CancelTransaction:
    type: object
    properties:
      transactionText:
        type: string
  UserDetails:
    type: object
    required:
      - email
      - firstName
      - lastName
      - mobileNumber
      - userId
    properties:
      bankIdVerified:
        type: string
      dateOfBirth:
        type: string
        description: 12-3-1988
      email:
        type: string
        description: test@test.com
      firstName:
        type: string
        description: TEST_NAME
      lastName:
        type: string
        description: LAST_NAME
      mobileNumber:
        type: string
        description: '12345678'
        enum:
          - Values with Length 8-12
      ssn:
        type: string
        description: '12345678912'
        enum:
          - Values with Length 11
      userId:
        type: string
        description: '1234567'
  OrderStatusInfoTransactionInfo:
    type: object
    required:
      - amount
      - status
      - timeStamp
      - transactionId
    properties:
      amount:
        type: number
        format: double
        description: Ordered amount in ÃƒÂ¸re
      status:
        type: string
        description: >-
          Id which uniquely identifies a payment. Maximum length is 30
          alphanumeric characters
      timeStamp:
        type: string
        description: Timestamp in ISO-8601 representing when vipps Cancelled transaction.
      transactionId:
        type: string
        description: Vipps transaction id
  TransactionInfo:
    type: object
    required:
      - amount
      - status
      - timeStamp
      - transactionId
      - transactionText
    properties:
      amount:
        type: number
        format: double
        description: Ordered amount in ÃƒÂ¸re
      status:
        type: string
        description: >-
          Id which uniquely identifies a payment. Maximum length is 30
          alphanumeric characters
      timeStamp:
        type: string
        description: Timestamp in ISO-8601 representing when vipps Cancelled transaction.
      transactionId:
        type: string
        description: Vipps transaction id
      transactionText:
        type: string
        description: Transaction text reference provided by merchant
  GetTransactionDetails:
    type: object
    properties:
      orderId:
        type: string
      shippingDetails:
        $ref: '#/definitions/PaymentShippingDetails'
      transactionLogHistory:
        type: array
        items:
          $ref: '#/definitions/TransactionLogHistory'
      transactionSummary:
        $ref: '#/definitions/TransactionSummary'
      userDetails:
        $ref: '#/definitions/UserDetails'
  InitiatePaymentV2Representation:
    type: object
    required:
      - orderId
      - url
    properties:
      orderId:
        type: string
        description: >-
          Id which uniquely identifies a payment. Maximum length is 30
          alphanumeric characters.
      url:
        type: string
        description: >-
          Url parameter will have url to redirect the request to vipps gateway
          page in case request is trigger from web browser or deeplink url to
          open vipps app incase request is triggered from Merchant Mobile App.
  ShippingDetailsReqest:
    type: object
    required:
      - address
      - shippingCost
      - shippingMethod
    properties:
      address:
        description: Address Details
        $ref: '#/definitions/AddressDetails'
      shippingCost:
        type: number
        format: double
        description: Shipping cost
      shippingMethod:
        type: string
        description: Shipping method which choosed for the payment
  TransactionResponce:
    type: object
    required:
      - orderId
    properties:
      orderId:
        type: string
        description: >-
          Id which uniquely identifies a payment. Maximum length is 30
          alphanumeric characters
      transactionInfo:
        $ref: '#/definitions/TransactionInfo'
      transactionSummary:
        $ref: '#/definitions/TransactionSummary'
  RefundTransactionResponce:
    type: object
    required:
      - orderId
    properties:
      orderId:
        type: string
        description: >-
          Id which uniquely identifies a payment. Maximum length is 30
          alphanumeric characters
      transaction:
        $ref: '#/definitions/TransactionInfo'
      transactionSummary:
        $ref: '#/definitions/TransactionSummary'
  MerchantInfoPayment:
    type: object
    required:
      - merchantSerialNumber
    properties:
      merchantSerialNumber:
        type: string
        description: >-
          Identifies a merchant sales channel i.e. website, mobile app etc.Size
          should be 6
  AddressDetails:
    type: object
    required:
      - addressLine1
      - city
      - country
      - zipCode
    properties:
      addressLine1:
        type: string
      addressLine2:
        type: string
      city:
        type: string
        description: City
      country:
        type: string
        description: "Ã¢â‚¬Å“NOÃ¢â‚¬\x9D Only country supported is Norway"
      zipCode:
        type: integer
        format: int32
        description: 4 Digit
  ShippingDetails:
    type: object
    properties:
      isDefault:
        type: string
      priority:
        type: integer
        format: int32
      shippingCost:
        type: number
        format: double
      shippingMethod:
        type: string
  InitiatePaymentCommandDto:
    type: object
    required:
      - merchantInfo
      - transaction
    properties:
      customerInfo:
        description: it has customer information and it is not required
        $ref: '#/definitions/CustomerInfoDto'
      merchantInfo:
        description: it has merchant related information to initiate the payment
        $ref: '#/definitions/MerchantInfoDto'
      transaction:
        description: it has transaction details which needs to be inititated
        $ref: '#/definitions/TransactionInfoInitiateDTO'
  TransactionInfoInitiateDTO:
    type: object
    required:
      - amount
      - orderId
      - transactionText
    properties:
      amount:
        type: integer
        format: int32
        description: Amount in ÃƒÂ¸re. 32 Bit Integer (2147483647)
      orderId:
        type: string
        description: >-
          Id which uniquely identifies a payment. Maximum length is 30
          alphanumeric characters.
        enum:
          - Values with length 30
      refOrderId:
        type: string
        description: >-
          Identifies if the payment references to some past orders registered
          with Vipps. If defined, transactions for this payment will show up as
          child transactions of the specified order.
        enum:
          - Values with length 30
      timeStamp:
        type: string
        format: date-time
        description: >-
          Id which uniquely identifies a payment. Maximum length is 30
          alphanumeric characters.
      transactionText:
        type: string
        description: Transaction text that can be displayed to end user
        enum:
          - Values with length 100
  MerchantInfoDto:
    type: object
    required:
      - callbackPrefix
      - fallBack
      - isApp
      - merchantSerialNumber
      - paymentType
    properties:
      authToken:
        type: string
        description: >-
          Merchant should share this token if merchant has authentication
          mechanism in place which could be used for making callbacks secure
        enum:
          - Values with length 255
      callbackPrefix:
        type: string
        description: >-
          This is to receive the callback after the payment request. Domain name
          and context path should be provided by merchant as the value for this
          parameter. The rest of the URL will be appended by Vipps according to
          Vipps guidelines. .
        enum:
          - Values with length 255
      consentRemovalPrefix:
        type: string
        description: >-
          In case of expess checkout payments, this callback will be used for
          informing merchant about consent removal from Vipps user. This means
          that particular user do not want merchant to store/use his personal
          information anymore.
        enum:
          - Values with length 255
      fallBack:
        type: string
        description: >-
          Vipps will use the fall back URL to redirect Merchant Page once
          Payment is completed in Vipps System
        enum:
          - Values with length 255
      isApp:
        type: boolean
        example: false
        description: >-
          This parameter indicates whether payment request is triggered from
          Mobile App or Web browser. Based on this value, response will be
          redirect url for Vipps landing page or deeplink Url to connect vipps
          App
      merchantSerialNumber:
        type: string
        example: NSBWSHP12
        description: 'Identifies a merchant sales channel i.e. website, mobile app etc.'
        enum:
          - Values with length 6
      paymentType:
        type: string
        description: >-
          This will parameter will identify difference between ecomm payment and
          ecomm express payment.
      shippingDetailsPrefix:
        type: string
        description: >-
          In case of express checkout payment, merchant should pass this prefix
          to let Vipps fetch shipping cost and method related details.
        enum:
          - Values with length 255
  GetPaymentStatusResponse:
    type: object
    properties:
      orderId:
        type: string
      transactionInfo:
        $ref: '#/definitions/OrderStatusInfoTransactionInfo'
  Transaction:
    type: object
    required:
      - transactionText
    properties:
      amount:
        type: integer
        format: int32
        description: >-
          Amount in ÃƒÂ¸re, if amount is 0 or not provided then full capture will
          be performed. 32 Bit Integer (2147483647)
      transactionText:
        type: string
        description: Proof of delivery
  FetchShippingCostAndMethod:
    type: object
    required:
      - addressId
      - addressLine1
      - city
      - country
      - postCode
    properties:
      addressId:
        type: integer
        format: int32
        description: >-
          Vipps Provided address Id. To be returned in response in the same
          field
      addressLine1:
        type: string
      addressLine2:
        type: string
      city:
        type: string
        description: City
      country:
        type: string
        description: "Ã¢â‚¬Å“NOÃ¢â‚¬\x9D Only country supported is Norway"
      postCode:
        type: integer
        format: int32
        description: 4 Digit
  CustomerInfoDto:
    type: object
    properties:
      mobileNumber:
        type: string
        description: >-
          Mobile number of the user who has to pay for the transation from
          Vipps.Allowed format:xxxxxxxx
        enum:
          - Values with length 8
  CancelPaymentActionRequest:
    type: object
    properties:
      merchantInfo:
        $ref: '#/definitions/MerchantInfoPayment'
      transaction:
        $ref: '#/definitions/CancelTransaction'
  ExpressCheckOutPaymentRequest:
    type: object
    required:
      - merchantSerialNumber
      - orderId
      - shippingDetails
      - userDetails
    properties:
      merchantSerialNumber:
        type: string
        description: Vipps assigned.
      orderId:
        type: string
        description: >-
          Id which uniquely identifies a payment. Maximum length is 30
          alphanumeric characters
      shippingDetails:
        description: >-
          Shipping Details will be added in the call back request if the payment
          is Express Checkout
        $ref: '#/definitions/ShippingDetailsReqest'
      transactionInfo:
        $ref: '#/definitions/OrderStatusInfoTransactionInfo'
      userDetails:
        description: Vipps User Information
        $ref: '#/definitions/UserDetails'
  AuthorizationTokenResponse:
    type: object
    properties:
      token_type:
        type: string
      access_token:
        type: string
      ext_expires_in:
        type: integer
      not_before:
        type: integer
      expires_in:
        type: integer
        format: int32
      resource:
        type: string
  AuthorizationTokenMethod:
    type: object
  FetchShippingCostResponse:
    type: object
    properties:
      addressId:
        type: integer
        format: int32
      orderId:
        type: string
      shippingDetails:
        type: array
        items:
          $ref: '#/definitions/ShippingDetails'
  TransactionSummary:
    type: object
    required:
      - capturedAmount
      - refundedAmount
      - remainingAmountToCapture
      - remainingAmountToRefund
    properties:
      capturedAmount:
        type: integer
        format: int32
        description: Total amount captured
      refundedAmount:
        type: integer
        format: int32
        description: Total refunded amount of the order
      remainingAmountToCapture:
        type: integer
        format: int32
        description: Total remaining amount to capture
      remainingAmountToRefund:
        type: integer
        format: int32
        description: Total remaining amount to refund
