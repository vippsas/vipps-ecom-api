openapi: '3.0.0'
info:
  description: |
    # Vipps eCommerce API
    Additional API documentation: https://github.com/vippsas/vipps-ecom-api/
  version: 1.6.23
  title: Vipps eCommerce API
tags:
  - name: Authorization Service
    description: Authorization Service
  - name: Vipps eCom API
    description: Functionality provided by the Vipps eCommerce API
  - name: Merchant Endpoints
    description: >-
      These endpoints must be implemented by the merchant, and are called by Vipps.
servers:
  - url: https://apitest.vipps.no
  - url: https://api.vipps.no
paths:
  /accesstoken/get:
    post:
      tags:
        - Authorization Service
      summary: Fetch authorization token
      parameters:
        - name: client_id
          in: header
          description: >-
            The `client_id` is available on portal.vipps.no, under the 'Utvikler' tab.
          required: true
          schema:
            type: string
            format: guid
          example: fb492b5e-7907-4d83-ba20-c7fb60ca35de
        - name: client_secret
          in: header
          description: >-
            The `client_secret` is available on portal.vipps.no, under the 'Utvikler' tab.
            Keep it secret.
          required: true
          schema:
            type: string
          example: Y8Kteew6GE2ZmeycEt6egg==
        - name: Ocp-Apim-Subscription-Key
          in: header
          description: >-
            The subscription key for the authorization token is available on portal.vipps.no, under the 'Utvikler' tab.
            Keep it secret.
          required: true
          schema:
            type: string
          example: 0f14ebcab0ec4b29ae0cb90d91b4a84a
      description: >-
        The access token endpoint is used to get the JWT (JSON Web Token) that
        must be passed in every API request in the `Authorization` header.
        The access token is a base64-encoded string value that must be
        acquired first before making any Vipps API calls.
        The access token is valid for 1 hour in the test environment
        and 24 hours in the production environment.
      operationId: fetchAuthorizationTokenUsingPost
      responses:
        '200':
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/AuthorizationTokenResponse'
        default:
          $ref: '#/components/responses/Default'
  '[consentRemovalPrefix]/v2/consents/{userId}':
    delete:
      tags:
        - Merchant Endpoints
      summary: Remove User Consent (for Vipps Hurtigkasse (express checkout))
      description: >-
        This API endpoint on the merchant side allows Vipps to send consent
        removal requests to the merchant. When receiving requests the merchant
        is obliged to remove the user details permanently, as per the GDPR
        guidelines. Vipps will add `/v2/consents/{userId}` to the end of this URL.
        URLs passed to Vipps must validate, see
        [URL validation](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#url-validation).
        We don't send requests to all ports, so to be safe use common ports such as: 80, 443, 8080.
        The URL must use HTTPS.
      operationId: removeUserConsentUsingDELETE
      parameters:
        - name: userId
          in: path
          description: >-
            URL-encoded `userId` provided when requesting user information from Vipps.
            Received by callback or with `/detail` request.
          required: true
          schema:
            type: string
          example: 'uiJskNQ6qNN1iwN891uuob=='
      responses:
        '200':
          description: Remove User Consent (for Vipps Hurtigkasse (express checkout))
  '[shippingDetailsPrefix]/v2/payments/{orderId}/shippingDetails':
    post:
      tags:
        - Merchant Endpoints
      summary: Fetch Shipping Cost & Method (for Vipps Hurtigkasse (express checkout))
      description: >-
        This API endpoint on the merchant side allows Vipps to get the shipping
        cost and method based on the provided address and product details. The
        primary use of this service is Vipps Hurtigkasse (express checkout)
        where Vipps needs to present shipping cost and method to the Vipps user.
        Vipps will add `/v2/payments/{orderId}/shippingDetails` to the end of
        this URL.
        Vipps has a *10 second timeout* for these requests, and thus requires
        a quick reply from the merchant's server for successful payments.
        URLs passed to Vipps must validate, see
        [URL validation](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#url-validation).
        We don't send requests to all ports, so to be safe use common ports such as: 80, 443, 8080.
        The URL must use HTTPS.
      operationId: fetchShippingCostUsingPOST
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          schema:
            type: string
          example: acme-shop-123-order123abc
          pattern: '^[a-zA-Z0-9-]{1,50}$'
        - name: Authorization
          in: header
          description: >-
            Token provided by the merchant in the initiate payment request as
            `authToken`. Used so that the merchant may authenticate the request
            from Vipps.
          schema:
            type: string
          example: ae0cb90d91b4a84a
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/ShippingCostAndMethod'
        description: ShippingCostAndMethod
        required: true
      responses:
        '200':
          description: Fetch Shipping Cost & Method.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/FetchShippingCostResponse'
  /ecomm/v2/payments:
    post:
      tags:
        - Vipps eCom API
      summary: Initiate Payment
      description: >-
        This API call allows the merchants to initiate payments.
        The `merchantSerialNumber` (MSN) specifies which sales unit the payment is for.
        Payments are uniquely identified with the `merchantSerialNumber` and `orderId` together.
        The merchant-provided `orderId` must be unique per sales unit.
        Once the transaction is successfully initiated in Vipps, you will receive a
        response with a URL that will direct the customer to the Vipps landing page.
        The landing page detects if the request comes from a mobile or laptop/desktop device,
        and if on a mobile device automatically switches to the Vipps app, if it is installed.
        The merchant may also pass the 'isApp: true' parameter that will make Vipps
        respond with a app-switch deeplink that will take the customer directly
        to the Vipps app. This is normally not necessary, as Vipps handles this automatically.
        URLs passed to Vipps must validate, see
        [URL validation](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#url-validation).
        The URLs must use HTTPS.
      operationId: initiatePaymentV3UsingPOST
      parameters:
        - in: header
          name: Authorization
          description: >-
            The access token is a base64-encoded string that is required for all API calls.
            It is a JWT (JSON Web Token).
            The access token is fetched from the `POST:/accesstoken/get` endpoint.
            It is valid for 1 hour in the test environment and 24 hours in the production environment.
          required: true
          schema:
            type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1Ni..."
        - in: header
          name: Content-Type
          description: "The content type must be `application/json`"
          required: true
          schema:
            type: string
          example: application/json
        - in: header
          name: Ocp-Apim-Subscription-Key
          description: >-
            The subscription key for your API product is available on portal.vipps.no, under the 'Utvikler' tab.
            Keep it secret.
          required: true
          schema:
            type: string
          example: 0f14ebcab0ec4b29ae0cb90d91b4a84a
        - in: header
          name: Merchant-Serial-Number
          description: >-
            The Merchant Serial Number (MSN) is a unique id for the sale unit
            that this payment is made for.
            This is a required parameter if you are a Vipps eCom partner
            making payments on behalf of a merchant.
            The partner must use the merchant's MSN (not the partner's MSN).
            This parameter is optional, and recommended, for regular Vipps
            merchants making payments for themselves.
          required: false
          schema:
            type: string
          example: '123456'
        - name: Vipps-System-Name
          in: header
          description: The name of the ecommerce solution. One word in lowercase letters is good.
          schema:
            type: string
          example: woocommerce
        - name: Vipps-System-Version
          in: header
          description: The version number of the ecommerce solution.
          schema:
            type: string
          example: '5.4'
        - name: Vipps-System-Plugin-Name
          in: header
          description: The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
          schema:
            type: string
          example: "vipps-woocommerce"
        - name: Vipps-System-Plugin-Version
          in: header
          description: The version number of the ecommerce plugin (if applicable).
          schema:
            type: string
          example: "1.2.1"
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/InitiatePaymentCommand'
        description: initiatePaymentCommand
        required: true
      callbacks:
        callbackExpress:
          '{$request.body#/merchantInfo/callbackPrefix}/v2/payments/{$request.body#/transaction/orderId}':
            post:
              summary: 'Callback : Transaction Update'
              description: >-
                This API call allows Vipps to send the transaction details to the merchant.
                For regular eCom payments the order and transaction details will be shared.
                For Vipps Hurtigkasse (express checkout) payments it will in addition provide
                user details and shipping details.
                Vipps will add `/v2/payments/{orderId}` to the end of this URL.
                Vipps has a *3 second timeout* for these requests, and thus requires
                a quick reply from the merchant's server for successful payments.
                URLs passed to Vipps must validate, see
                [URL validation](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#url-validation).
                We don't send requests to all ports, so to be safe use common ports such as: 80, 443, 8080.
                The URL must use HTTPS.
              operationId: InitiatePaymentTransactionUpdateCallbackForRegularPaymentUsingPOSTExpress
              parameters:
                - name: orderId
                  in: path
                  description: orderId
                  required: true
                  schema:
                    type: string
              responses:
                '200':
                  description: Vipps does not require a response for this request.
              requestBody:
                content:
                  application/json;charset=UTF-8:
                    schema:
                      $ref: '#/components/schemas/ExpressCheckOutPaymentRequest'
        callbackRegular:
          '{$request.body#/merchantInfo/callbackPrefix}/v2/payments/{$request.body#/transaction/orderId}':
            post:
              summary: 'Callback : Transaction Update'
              description: >-
                This API call allows Vipps to send the transaction details to the merchant.
                For regular eCom payments the order and transaction details will be shared.
                For Vipps Hurtigkasse (express checkout) payments it will in addition provide
                user details and shipping details.
                Vipps will add `/v2/payments/{orderId}` to the end of this URL.
                Vipps has a *3 second timeout* for these requests, and thus requires
                a quick reply from the merchant's server for successful payments.
                URLs passed to Vipps must validate, see
                [URL validation](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#url-validation).
                We don't send requests to all ports, so to be safe use common ports such as: 80, 443, 8080.
                The URL must use HTTPS.
              operationId: InitiatePaymentTransactionUpdateCallbackForRegularPaymentUsingPOSTExpress
              parameters:
                - name: orderId
                  in: path
                  description: orderId
                  required: true
                  schema:
                    type: string
              responses:
                '200':
                  description: Vipps does not require a response for this request.
              requestBody:
                content:
                  application/json;charset=UTF-8:
                    schema:
                      $ref: '#/components/schemas/RegularCheckOutPaymentRequest'
        consentRemoval:
          '{$request.body#/merchantInfo/consentRemovalPrefix}/v2/consents/{userId}':
            delete:
              summary: Remove User Consent (for Vipps Hurtigkasse (express checkout))
              description: >-
                This API endpoint on the merchant side allows Vipps to send consent
                removal requests to merchant. When receiving requests the merchant is
                obliged to remove the user details permanently, as per the GDPR
                guidelines. Vipps will add `/v2/consents/{userId}` to the end of this URL.
                URLs passed to Vipps must validate, see
                [URL validation](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#url-validation).
                We don't send requests to all ports, so to be safe use common ports such as: 80, 443, 8080.
                The URL must use HTTPS.
              operationId: removeUserConsentUsingDELETE
              parameters:
                - name: userId
                  in: path
                  description: >-
                    URL encoded userId provided when requesting user information from Vipps.
                    Received by callback or get detail request.
                  required: true
                  schema:
                    type: string
                  example: 'uiJskNQ6qNN1iwN891uuob=='
              responses:
                '200':
                  description: 'OK'
        shippingDetails:
          '{$request.body#/merchantInfo/shippingDetailsPrefix}/v2/payments/{$request.body#/transaction/orderId}/shippingDetails':
            post:
              summary: Fetch Shipping Cost & Method (for Vipps Hurtigkasse (express checkout))
              description: >-
                This API endpoint on the merchant side allows Vipps to get the shipping
                cost and method based on the provided address and product details. The
                primary use of this service is Vipps Hurtigkasse (express checkout)
                where Vipps needs to present shipping cost and method to the Vipps user.
                Vipps will add `/v2/payments/{orderId}/shippingDetails` to the end of
                this URL.
                Vipps has a *10 second timeout* for these requests, and thus requires
                a quick reply from the merchant's server for successful payments.
                If the merchant does not respond in time, the user will get an
                error in Vipps saying "No shipping methods found".
                URLs passed to Vipps must validate, see
                [URL validation](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#url-validation).
                We don't send requests to all ports, so to be safe use common ports such as: 80, 443, 8080.
                The URL must use HTTPS.
              operationId: fetchShippingCostUsingPOST
              parameters:
                - name: orderId
                  in: path
                  description: orderId
                  required: true
                  schema:
                    type: string
              responses:
                '200':
                  description: Fetch Shipping Cost & Method.
                  content:
                    application/json;charset=UTF-8:
                      schema:
                        $ref: '#/components/schemas/FetchShippingCostResponse'
              requestBody:
                content:
                  application/json;charset=UTF-8:
                    schema:
                      $ref: '#/components/schemas/ShippingCostAndMethod'
                description: ShippingCostAndMethod
                required: true
      responses:
        '200':
          description: Response for Initiate Payment
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/PaymentInitiationResponse'
        default:
          $ref: '#/components/responses/Default'
  '[callbackPrefix]/v2/payments/{orderId}':
    post:
      tags:
        - Merchant Endpoints
      summary: 'Callback : Transaction Update'
      description: >-
        This API call allows Vipps to send the transaction details.
        For regular eCom payments the order and transaction details will be shared.
        For Vipps Hurtigkasse (express checkout) payments it will provides user details and
        shipping details addition to the order and transaction details.
        Vipps will add `/v2/payments/{orderId}` to the end of this URL.
        URLs passed to Vipps must validate, see
        [URL validation](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#url-validation).
        We don't send requests to all ports, so to be safe use common ports such as: 80, 443, 8080.
        The URL must use HTTPS.
      operationId: transactionUpdateCallbackForRegularPaymentUsingPOST
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          schema:
            type: string
          example: acme-shop-123-order123abc
          pattern: '^[a-zA-Z0-9-]{1,50}$'
        - name: Authorization
          in: header
          description: >-
            Token provided by the merchant in initiate payment request as
            `authToken`. Used so that the merchant may authenticate the request
            from Vipps.
          schema:
            type: string
          example: ae0cb90d91b4a84a
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/TransactionUpdateCallbackOneOf'
        description: >-
          The body of the request made by Vipps. It will differ if the request
          is a regular or express payment.
        required: true
      responses:
        '200':
          description: All ok
  '/ecomm/v2/payments/{orderId}/capture':
    post:
      tags:
        - Vipps eCom API
      summary: 'Capture Payment '
      description: >-
        This API call allows merchant to capture the reserved amount. Amount to
        capture cannot be higher than reserved. The API also allows capturing
        a partial amount of the reserved amount. Partial capture can be called as
        many times as required so long there is a remaining reserved amount to capture.
        The transaction text is not optional and is used as a proof of delivery
        (tracking code, consignment number etc.). In a case of direct capture,
        both the reservation and the capture are executed in a single operation.
        It is important to check the response, and the capture is only
        successful when the response is `HTTP 200 OK`.
      operationId: capturePaymentUsingPOST
      parameters:
        - name: orderId
          in: path
          description: The `orderId` is specified when initiating the payment.
          required: true
          schema:
            type: string
        - in: header
          name: Authorization
          description: >-
            The access token is a base64-encoded string that is required for all API calls.
            It is a JWT (JSON Web Token).
            The access token is fetched from the `POST:/accesstoken/get` endpoint.
            It is valid for 1 hour in the test environment and 24 hours in the production environment.
          required: true
          schema:
            type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1Ni..."
        - in: header
          name: Content-Type
          description: "The content type must be `application/json`"
          required: true
          schema:
            type: string
          example: application/json
        - in: header
          name: Ocp-Apim-Subscription-Key
          description: >-
            The subscription key for your API product is available on portal.vipps.no, under the 'Utvikler' tab.
            Keep it secret.
          required: true
          schema:
            type: string
          example: 0f14ebcab0ec4b29ae0cb90d91b4a84a
        - in: header
          name: X-Request-Id
          required: true
          description: >-
            Used for making requests idempotent. Adding the `X-Request-Id` header will allow
            repeated requests without it making additional changes.
            Unique for orderId, merchantSerialNumber and endpoint.
            Required for making partial captures.
            You can use any unique id for your X-Request-Id.
            Max 40 characters.
          schema:
            type: string
          example: kRk3uEeiogxLu1yGSZRlNgsIv3TuNS
        - in: header
          name: Merchant-Serial-Number
          description: >-
            The Merchant Serial Number (MSN) is a unique id for the sale unit
            that this payment is made for.
            This is a required parameter if you are a Vipps eCom partner
            making payments on behalf of a merchant.
            The partner must use the merchant's MSN (not the partner's MSN).
            This parameter is optional, and recommended, for regular Vipps
            merchants making payments for themselves.
          required: false
          schema:
            type: string
          example: '123456'
        - name: Vipps-System-Name
          in: header
          description: The name of the ecommerce solution. One word in lowercase letters is good.
          schema:
            type: string
          example: woocommerce
        - name: Vipps-System-Version
          in: header
          description: The version number of the ecommerce solution.
          schema:
            type: string
          example: "5.4"
        - name: Vipps-System-Plugin-Name
          in: header
          description: The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
          schema:
            type: string
          example: "vipps-woocommerce"
        - name: Vipps-System-Plugin-Version
          in: header
          description: The version number of the ecommerce plugin (if applicable).
          schema:
            type: string
          example: "1.2.1"
      requestBody:
        $ref: '#/components/requestBodies/PaymentActionsRequest'
      responses:
        '200':
          description: Capture payment response
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        default:
          $ref: '#/components/responses/Default'
  '/ecomm/v2/payments/{orderId}/cancel':
    put:
      tags:
        - Vipps eCom API
      summary: Cancel Payment
      description: >-
        This API call allows merchants to cancel a reserved or initiated transaction.
        In order to enable cancellation of remaining funds after partial capture, the `shouldReleaseRemainingFunds` flag must be set.
        Please note that in a case of communication errors during an initiate payment service call
        between Vipps and PSP/Acquirer/Issuer; even in a case that customer has
        confirmed a payment, the payment will be cancelled by Vipps. Note this
        means you cannot cancel a captured payment.
      operationId: cancelPaymentRequestUsingPUT
      parameters:
        - name: orderId
          in: path
          description: The `orderId` is specified when initiating the payment.
          required: true
          schema:
            type: string
        - in: header
          name: Authorization
          description: >-
            The access token is a base64-encoded string that is required for all API calls.
            It is a JWT (JSON Web Token).
            The access token is fetched from the `POST:/accesstoken/get` endpoint.
            It is valid for 1 hour in the test environment and 24 hours in the production environment.
          required: true
          schema:
            type: string
        - in: header
          name: Content-Type
          description: "The content type must be `application/json`"
          required: true
          schema:
            type: string
          example: application/json
        - in: header
          name: Ocp-Apim-Subscription-Key
          description: >-
            The subscription key for your API product is available on portal.vipps.no, under the 'Utvikler' tab.
            Keep it secret.
          required: true
          schema:
            type: string
          example: 0f14ebcab0ec4b29ae0cb90d91b4a84a
        - in: header
          name: Merchant-Serial-Number
          description: >-
            The Merchant Serial Number (MSN) is a unique id for the sale unit
            that this payment is made for.
            This is a required parameter if you are a Vipps eCom partner
            making payments on behalf of a merchant.
            The partner must use the merchant's MSN (not the partner's MSN).
            This parameter is optional, and recommended, for regular Vipps
            merchants making payments for themselves.
          required: false
          schema:
            type: string
          example: '123456'
        - name: Vipps-System-Name
          in: header
          description: The name of the ecommerce solution. One word in lowercase letters is good.
          schema:
            type: string
          example: woocommerce
        - name: Vipps-System-Version
          in: header
          description: The version number of the ecommerce solution.
          schema:
            type: string
          example: "5.4"
        - name: Vipps-System-Plugin-Name
          in: header
          description: The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
          schema:
            type: string
          example: "vipps-woocommerce"
        - name: Vipps-System-Plugin-Version
          in: header
          description: The version number of the ecommerce plugin (if applicable).
          schema:
            type: string
          example: "1.2.1"
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/CancelPaymentActionRequest'
        description: paymentActionsRequest
        required: true
      responses:
        '200':
          description: Cancel payment response
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/CancelTransactionResponse'
        default:
          $ref: '#/components/responses/Default'
  '/ecomm/v2/payments/{orderId}/authorize':
    put:
      tags:
        - Vipps eCom API
      summary: Authorize Payment
      description: >-
        The API call allows merchant to refresh the authorizations of the payment. A reservation's lifetime
        is defined by the scheme. Typically 7 days for Visa, and 30 days for Mastercard.
        This is currently _not yet_  available in the production environment.
      operationId: authorizePaymentUsingPut
      parameters:
        - name: orderId
          in: path
          description: The `orderId` is specified when initiating the payment.
          required: true
          schema:
            type: string
        - in: header
          name: Authorization
          description: >-
            The access token is a base64-encoded string that is required for all API calls.
            It is a JWT (JSON Web Token).
            The access token is fetched from the `POST:/accesstoken/get` endpoint.
            It is valid for 1 hour in the test environment and 24 hours in the production environment.
          required: true
          schema:
            type: string
        - in: header
          name: Content-Type
          description: "The content type must be `application/json`"
          required: true
          schema:
            type: string
          example: application/json
        - in: header
          name: Ocp-Apim-Subscription-Key
          description: >-
            The subscription key for your API product is available on portal.vipps.no, under the 'Utvikler' tab.
            Keep it secret.
          required: true
          schema:
            type: string
          example: 0f14ebcab0ec4b29ae0cb90d91b4a84a
        - in: header
          name: Merchant-Serial-Number
          description: >-
            The Merchant Serial Number (MSN) is a unique id for the sale unit
            that this payment is made for.
            This is a required parameter if you are a Vipps eCom partner
            making payments on behalf of a merchant.
            The partner must use the merchant's MSN (not the partner's MSN).
            This parameter is optional, and recommended, for regular Vipps
            merchants making payments for themselves.
          required: false
          schema:
            type: string
          example: '123456'
        - name: Vipps-System-Name
          in: header
          description: The name of the ecommerce solution. One word in lowercase letters is good.
          schema:
            type: string
          example: woocommerce
        - name: Vipps-System-Version
          in: header
          description: The version number of the ecommerce solution.
          schema:
            type: string
          example: "5.4"
        - name: Vipps-System-Plugin-Name
          in: header
          description: The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
          schema:
            type: string
          example: "vipps-woocommerce"
        - name: Vipps-System-Plugin-Version
          in: header
          description: The version number of the ecommerce plugin (if applicable).
          schema:
            type: string
          example: "1.2.1"
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/AuthorizePaymentRequest'
        description: paymentActionsRequest
        required: true
      responses:
        '200':
          description: Cancel payment response
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        default:
          $ref: '#/components/responses/Default'
  '/ecomm/v2/payments/{orderId}/refund':
    post:
      tags:
        - Vipps eCom API
      summary: 'Refund Payment '
      description: >-
        The API allows a merchant to do a refund of an already captured
        transaction. There is an option to do a partial refund of the captured
        amount. Refunded amount cannot be larger than captured. Time frame for
        issuing a refund for a payment is 365 days from the date payment has
        been captured. If the refund payment service call is called after the
        refund time frame, service call will respond with an error. Refunded
        funds will be transferred from the merchant account to the customer
        credit card that was used in payment flow. Pay attention that in order
        to perform refund, there must be enough funds at merchant settlements
        account.
      operationId: refundPaymentUsingPOST
      parameters:
        - name: orderId
          in: path
          description: The `orderId` is specified when initiating the payment.
          required: true
          schema:
            type: string
        - in: header
          name: Authorization
          description: >-
            The access token is a base64-encoded string that is required for all API calls.
            It is a JWT (JSON Web Token).
            The access token is fetched from the `POST:/accesstoken/get` endpoint.
            It is valid for 1 hour in the test environment and 24 hours in the production environment.
          required: true
          schema:
            type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1Ni..."
        - in: header
          name: Content-Type
          description: "The content type must be `application/json`"
          required: true
          schema:
            type: string
          example: application/json
        - in: header
          name: Ocp-Apim-Subscription-Key
          description: >-
            The subscription key for your API product is available on portal.vipps.no, under the 'Utvikler' tab.
            Keep it secret.
          required: true
          schema:
            type: string
          example: 0f14ebcab0ec4b29ae0cb90d91b4a84a
        - in: header
          name: X-Request-Id
          required: true
          description: >-
            Used for making requests idempotent. Adding the `X-Request-Id` header will allow
            repeated requests without it making additional changes.
            Unique for orderId, merchantSerialNumber and endpoint.
            Max 40 characters. Required if the amount is partial.
          schema:
            type: string
          example: kRk3uEeiogxLu1yGSZRlNgsIv3TuNS
        - in: header
          name: Merchant-Serial-Number
          description: >-
            The Merchant Serial Number (MSN) is a unique id for the sale unit
            that this payment is made for.
            This is a required parameter if you are a Vipps eCom partner
            making payments on behalf of a merchant.
            The partner must use the merchant's MSN (not the partner's MSN).
            This parameter is optional, and recommended, for regular Vipps
            merchants making payments for themselves.
          required: false
          schema:
            type: string
          example: '123456'
        - name: Vipps-System-Name
          in: header
          description: The name of the ecommerce solution. One word in lowercase letters is good.
          schema:
            type: string
          example: woocommerce
        - name: Vipps-System-Version
          in: header
          description: The version number of the ecommerce solution.
          schema:
            type: string
          example: "5.4"
        - name: Vipps-System-Plugin-Name
          in: header
          description: The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
          schema:
            type: string
          example: "vipps-woocommerce"
        - name: Vipps-System-Plugin-Version
          in: header
          description: The version number of the ecommerce plugin (if applicable).
          schema:
            type: string
          example: "1.2.1"
      requestBody:
        $ref: '#/components/requestBodies/PaymentActionsRequest'
      responses:
        '200':
          description: Refund payment response
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/RefundTransactionResponse'
        default:
          $ref: '#/components/responses/Default'
  '/ecomm/v2/integration-test/payments/{orderId}/approve':
    post:
      tags:
        - Vipps eCom API
      summary: 'Force Approve Payment'
      description: >-
        This endpoint allows developers to approve a payment through the Vipps eCom API
        without the use of the Vipps app. This is useful for automated testing.
        Express checkout is not supported for this endpoint.
        The endpoint is only available in our Test environment.
        Attempted use of the endpoint in production is not allowed, and will fail.
        Important: All test users must manually approve at least one payment in
        Vipps (using the app) before this endpoint can be used for that user.
      operationId: integrationTestApprovePayment
      parameters:
        - name: orderId
          in: path
          description: The `orderId` is specified when initiating the payment.
          required: true
          schema:
            type: string
        - in: header
          name: Authorization
          description: >-
            The access token is a base64-encoded string that is required for all API calls.
            It is a JWT (JSON Web Token).
            The access token is fetched from the `POST:/accesstoken/get` endpoint.
            It is valid for 1 hour in the test environment and 24 hours in the production environment.
          required: true
          schema:
            type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1Ni..."
        - in: header
          name: Content-Type
          description: "The content type must be `application/json`"
          required: true
          schema:
            type: string
          example: application/json
        - in: header
          name: Ocp-Apim-Subscription-Key
          description: >-
            The subscription key for your API product is available on portal.vipps.no, under the 'Utvikler' tab.
            Keep it secret.
          required: true
          schema:
            type: string
          example: 0f14ebcab0ec4b29ae0cb90d91b4a84a
        - in: header
          name: X-Request-Id
          description: >-
            Id used for making requests idempotent. Adding this ID will allow
            the merchant to retry requests without it making additional changes.
            Unique for orderId, merchantSerialNumber and endpoint. Max 40
            characters.
          schema:
            type: string
          example: kRk3uEeiogxLu1yGSZRlNgsIv3TuNS
        - name: Vipps-System-Name
          in: header
          description: The name of the ecommerce solution. One word in lowercase letters is good.
          schema:
            type: string
          example: woocommerce
        - name: Vipps-System-Version
          in: header
          description: The version number of the ecommerce solution.
          schema:
            type: string
          example: "5.4"
        - name: Vipps-System-Plugin-Name
          in: header
          description: The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
          schema:
            type: string
          example: "vipps-woocommerce"
        - name: Vipps-System-Plugin-Version
          in: header
          description: The version number of the ecommerce plugin (if applicable).
          schema:
            type: string
          example: "1.2.1"
      requestBody:
        $ref: '#/components/requestBodies/ForceApproveRequest'
      responses:
        '200':
          description: Force approve payment response
        default:
          $ref: '#/components/responses/Default'
  '/ecomm/v2/payments/{orderId}/details':
    get:
      tags:
        - Vipps eCom API
      summary: Get Payment Details
      description: >-
        This API call allows merchant to get the details of a payment
        transaction. Service call returns detailed transaction history of given
        payment where events are sorted from newest to oldest for when the
        transaction occurred.
      operationId: getPaymentDetailsUsingGET
      parameters:
        - name: orderId
          in: path
          description: The `orderId` is specified when initiating the payment.
          required: true
          schema:
            type: string
        - in: header
          name: Authorization
          description: >-
            The access token is a base64-encoded string that is required for all API calls.
            It is a JWT (JSON Web Token).
            The access token is fetched from the `POST:/accesstoken/get` endpoint.
            It is valid for 1 hour in the test environment and 24 hours in the production environment.
          required: true
          schema:
            type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1Ni..."
        - in: header
          name: Content-Type
          description: "The content type must be `application/json`"
          required: true
          schema:
            type: string
          example: application/json
        - in: header
          name: Ocp-Apim-Subscription-Key
          description: >-
            The subscription key for your API product is available on portal.vipps.no, under the 'Utvikler' tab.
            Keep it secret.
          required: true
          schema:
            type: string
          example: 0f14ebcab0ec4b29ae0cb90d91b4a84a
        - in: header
          name: Merchant-Serial-Number
          description: >-
            The Merchant Serial Number (MSN) is a unique id for the sale unit
            that this payment is made for.
            This is a required parameter if you are a Vipps eCom partner
            making payments on behalf of a merchant.
            The partner must use the merchant's MSN (not the partner's MSN).
            This parameter is optional, and recommended, for regular Vipps
            merchants making payments for themselves.
          required: false
          schema:
            type: string
          example: '123456'
        - name: Vipps-System-Name
          in: header
          description: The name of the ecommerce solution. One word in lowercase letters is good.
          schema:
            type: string
          example: woocommerce
        - name: Vipps-System-Version
          in: header
          description: The version number of the ecommerce solution.
          schema:
            type: string
          example: "5.4"
        - name: Vipps-System-Plugin-Name
          in: header
          description: The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
          schema:
            type: string
          example: "vipps-woocommerce"
        - name: Vipps-System-Plugin-Version
          in: header
          description: The version number of the ecommerce plugin (if applicable).
          schema:
            type: string
          example: "1.2.1"
      responses:
        '200':
          description: Get payment Details
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/TransactionDetails'
        default:
          $ref: '#/components/responses/Default'
  '/ecomm/v2/payments/{orderId}/status':
    get:
      deprecated: true
      tags:
        - Vipps eCom API
      summary: 'Deprecated: Get Order Status'
      description: >-
        This API call allows the merchant to get the status of the last payment
        transaction. Primarily use of this service is meant for inApp where
        simple response to check order status is preferred.
      operationId: getOrderStatusUsingGET
      parameters:
        - name: orderId
          in: path
          description: The `orderId` is specified when initiating the payment.
          required: true
          schema:
            type: string
        - in: header
          name: Authorization
          description: >-
            The access token is a base64-encoded string that is required for all API calls.
            It is a JWT (JSON Web Token).
            The access token is fetched from the `POST:/accesstoken/get` endpoint.
            It is valid for 1 hour in the test environment and 24 hours in the production environment.
          required: true
          schema:
            type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1Ni..."
        - in: header
          name: Ocp-Apim-Subscription-Key
          description: >-
            The subscription key for your API product is available on portal.vipps.no, under the 'Utvikler' tab.
            Keep it secret.
          required: true
          schema:
            type: string
          example: 0f14ebcab0ec4b29ae0cb90d91b4a84a
      responses:
        '200':
          description: Get order status
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/PaymentStatus'
        default:
          $ref: '#/components/responses/Default'
  '/vipps-userinfo-api/userinfo/{sub}':
    get:
      tags:
        - Vipps Userinfo API
      summary: Get Userinfo
      description: >-
        This endpoint returns the payload with the information that the user has consented to share. 
        Find more info on the `/userinfo` endpoint at the OIDC Standard https://openid.net/specs/openid-connect-core-1_0.html#UserInfo
      operationId: getUserinfo
      parameters:
        - name: sub
          in: path
          description: The `sub` is specified when fetching payment details
          required: true
          schema:
            type: string
        - in: header
          name: Authorization
          description: >-
            The access token is a base64-encoded string that is required for all API calls.
            It is a JWT (JSON Web Token).
            The access token is fetched from the `POST:/accesstoken/get` endpoint.
            It is valid for 1 hour in the test environment and 24 hours in the production environment.
          required: true
          schema:
            type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1Ni..."
        - in: header
          name: Merchant-Serial-Number
          description: >-
            The Merchant Serial Number (MSN) is a unique id for the sale unit
            that this payment is made for.
            This is a required parameter if you are a Vipps eCom partner
            making payments on behalf of a merchant.
            The partner must use the merchant's MSN (not the partner's MSN).
            This parameter is optional, and recommended, for regular Vipps
            merchants making payments for themselves.
          required: false
          schema:
            type: string
          example: '123456'
      responses:
        "200":
          description: Get Userinfo
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Userinfo'
        '400':
          description: Bad Request
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/UserinfoError'
        '401':
          description: Unauthorized
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/UserinfoError'
        '403':
          description: Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/UserinfoError'
        '404':
          description: Not Found
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/UserinfoError'
        '500':
          description: Internal Server Error
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/UserinfoError'

components:
  requestBodies:
    PaymentActionsRequest:
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: '#/components/schemas/PaymentActionsRequest'
      description: paymentActionsRequest
      required: true
    ForceApproveRequest:
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: '#/components/schemas/ForceApproveRequest'
      description: ForceApproveRequest
      required: true
  schemas:
    PaymentActionsRequest:
      type: object
      properties:
        merchantInfo:
          $ref: '#/components/schemas/MerchantInfoPayment'
        transaction:
          $ref: '#/components/schemas/Transaction'
    ForceApproveRequest:
      type: object
      properties:
        customerPhoneNumber:
          type: string
          description: Target customer phone number. 8 digits.
          example: '91234567'
          pattern: '^\d{8}$'
        token:
          type: string
          description: The token value received in the `url` property in the Initiate response
          example: eyJraWQiOiJqd3R
    Address:
      type: object
      required:
        - addressLine1
        - city
        - country
        - postCode
      properties:
        addressLine1:
          type: string
          description: Address Line 1
          example: Robert Levins gate 5
        addressLine2:
          type: string
          description: Address Line 2
          example: 'Att: Rune Garborg'
        city:
          type: string
          description: City
          example: Oslo
        country:
          type: string
          description: 'Country'
          example: 'Norway'
          enum:
            - Norway
        postCode:
          type: string
          description: Post Code
          example: '0154'
    AddressExpress:
      type: object
      required:
        - addressLine1
        - city
        - country
        - postCode
      properties:
        addressLine1:
          type: string
          description: Address Line 1
          example: Robert Levins gate 5
        addressLine2:
          type: string
          description: Address Line 2
          example: 'Att: Rune Garborg'
        city:
          type: string
          description: City
          example: Oslo
        country:
          type: string
          description: 'Country'
          example: 'Norway'
          enum:
            - Norway
        zipCode:
          type: string
          description: "Postcode (apologies for not using `postCode` as elsewhere)"
          example: "0154"
    PaymentShippingDetails:
      type: object
      required:
        - shippingCost
        - shippingMethod
        - shippingMethodId
      properties:
        address:
          $ref: '#/components/schemas/Address'
        shippingCost:
          type: number
          format: double
          description: Shipping Cost
          example: 1500
        shippingMethod:
          type: string
          description: >-
            The description of the shipping method.
            Typically the name of the shipping company and the name of their service.
            Max length: 256 characters.
            Recommended length for readability on most screens: 25 characters.
          example: Posten Servicepakke
          maxLength: 256
        shippingMethodId:
          type: string
          maxLength: 100
    TransactionLogHistory:
      type: object
      required:
        - operation
        - amount
        - operationSuccess
        - transactionText
      properties:
        amount:
          type: integer
          format: int32
        operation:
          type: string
          example: RESERVE
          description: >-
            The operation that was performed for this log entry. See the [API
            guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#responses-from-requests)
            for more information.
          enum:
            - INITIATE
            - RESERVE
            - SALE
            - CAPTURE
            - REFUND
            - CANCEL
            - VOID
        operationSuccess:
          type: boolean
          description: If the corresponding operation was successful.
          example: true
        requestId:
          type: string
          description: >-
            The idempotent request id provided by the merchant for the
            operation.
          example: '12983921873981899000'
        timeStamp:
          type: string
          description: Timestamp in ISO-8601 representing when the operation was performed.
          example: '2019-02-05T12:27:42.311Z'
        transactionId:
          type: string
          description: Identifies the transaction
          example: '5001446662'
        transactionText:
          type: string
          description: Transaction text to be displayed in Vipps
          example: One pair of Vipps socks
          maxLength: 100
    CancelTransaction:
      type: object
      properties:
        transactionText:
          type: string
          description: Transaction text to be displayed in Vipps
          example: One pair of Vipps socks
          maxLength: 100
    UserDetails:
      type: object
      required:
        - email
        - firstName
        - lastName
        - mobileNumber
        - userId
      properties:
        bankIdVerified:
          type: string
          description: Optional Y/N string indicating if the user in bankId verified, must be requested during onboarding.
          example: 'Y'
          enum:
            - Y
            - N
        dateOfBirth:
          type: string
          description: "Optional date of birth information, must be requested during onboarding. Please note: We will at some point move to ISO 8601: YYYY-MM-DD"
          example: 12-3-1988
        email:
          type: string
          description: Email address
          example: 'user@example.com'
        firstName:
          type: string
          description: First name
          example: 'Ada'
        lastName:
          type: string
          description: Last name
          example: 'Lovelace'
        mobileNumber:
          type: string
          description: Mobile number
          example: '91234567'
          minLength: 8
          maxLength: 8
          pattern: '^\d{8}$'
        ssn:
          type: string
          description: Optional social security number for the user, must be requested during onboarding.
          example: '12345678901'
          minLength: 11
          maxLength: 11
          pattern: '^\d{11}$'
        userId:
          type: string
          example: 'uiJskNQ6qNN1iwN891uuob=='
          maxLength: 50
          description: Identifies a user in Vipps. Merchant is required to store this field for future references.
          pattern: '^[\d\w\/=+]+$'
    Userinfo:
      type: object
      properties:
        accounts:
          description: 'Contains an array with the end user''s accounts registered in the Vipps app'
          type: array
          items:
            $ref: '#/components/schemas/UserinfoAccountInfo'
        address:
          description: 'Contains the end user''s preferred addresses.'
          items:
            $ref: '#/components/schemas/UserinfoAddress'
        other_addresses:
          description: 'Contains an array with the end user''s none default addresses, if any. This list can contain an address with the address_type home, work, and/or other, if the user has registered them in the Vipps app'
          type: array
          items:
            $ref: '#/components/schemas/Address'
        birthdate:
          description: 'End-User''s birthday formatted as YYYY-MM-DD'
          type: string
          example: '2000-12-31'
        email:
          description: 'End user''s email address.'
          type: string
        email_verified:
          description: 'Boolean value if the End user''s email address is verified.'
          type: boolean
        family_name:
          description: 'Surname(s) or last name(s) of the end user.'
          type: string
        given_name:
          description: 'Given name(s) or first name(s) of the end user. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.'
          type: string
        name:
          description: 'End user''s full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User''s locale and preferences.'
          type: string
        nin:
          description: 'National identity number'
          type: string
          example: '09057517287'
          pattern: '^\d{11}$'
        phone_number:
          description: 'End-User''s telephone number on MSISDN format, up to 15 digits.'
          type: string
          example: '47912345678'
          pattern: '^\d{15}$'
        sid:
          description: 'Session identifier - This represents a Session of a User Agent or device. Currently not in use'
          type: string
          example: '7d78a726-af92-499e-b857-de263ef9a969'
        sub:
          description: 'Subject - Identifier for the end user'
          type: string
          example: 'c06c4afe-d9e1-4c5d-939a-177d752a0944'
    UserinfoAccountInfo:
      type: object
      properties:
        account_name:
          description: "User''s defined name for account"
          type: string
        account_number:
          description: "User''s account number"
          type: string
        bank_name:
          description: "Bank connected to the account number"
          type: string
    UserinfoAddress:
      type: object
      properties:
        address_type:
          description: 'Address type is either home, work or other'
          type: string
        country:
          description: 'Two letter country code'
          type: string
        default:
          description: 'If this is default address'
          type: boolean
        formatted:
          description: 'End user address as a formatted string'
          type: string
        postal_code:
          description: 'Postal code'
          type: string
        region:
          description: 'End user region'
          type: string
        street_address:
          description: 'End user street address'
          type: string
    CallbackTransactionInfoRegular:
      type: object
      required:
        - amount
        - status
        - timeStamp
      properties:
        amount:
          type: number
          format: double
          description:
            'Ordered amount. Amounts are specified in minor units. For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.'
          example: 49900
        status:
          type: string
          enum:
            - RESERVED
            - SALE
            - CANCELLED
            - REJECTED
          description: >-
            Status which gives the current state of the payment within Vipps.
            See the [API guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#callbacks)
            for more information.
          example: RESERVED
        timeStamp:
          type: string
          description: >-
            Timestamp in ISO-8601 representing when the operation was performed.
          example: '2018-12-12T11:18:38.246Z'
        transactionId:
          type: string
          description: 'Vipps transaction id, automatically generated by Vipps'
          example: '5001420062'
    CallbackTransactionInfoExpress:
      type: object
      required:
        - amount
        - status
        - timeStamp
      properties:
        amount:
          type: number
          format: double
          description: 'Ordered amount. Amounts are specified in minor units. For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.'
          example: 49900
        status:
          type: string
          enum:
            - RESERVE
            - SALE
            - CANCELLED
            - REJECTED
          description: >-
            Status which gives the current state of the payment within Vipps.
            See the [API
            guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#callbacks)
            for more information.
          example: RESERVE
        timeStamp:
          type: string
          description: >-
            Timestamp in ISO-8601 representing when the operation was performed.
          example: '2018-12-12T11:18:38.246Z'
        transactionId:
          type: string
          description: 'Vipps transaction id, automatically generated by Vipps'
          example: '5001420062'
    OrderStatusInfoTransactionInfo:
      type: object
      required:
        - amount
        - status
        - timeStamp
      properties:
        amount:
          type: number
          format: double
          description: 'Ordered amount. Amounts are specified in minor units. For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.'
          example: 49900
        status:
          type: string
          enum:
            - INITIATE
            - REGISTER
            - RESERVE
            - SALE
            - CAPTURE
            - REFUND
            - CANCEL
            - VOID
            - FAILED
            - REJECTED
          description: >-
            Status which gives the current state of the payment within Vipps.
            See the [API
            guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#responses-from-requests)
            for more information.
          example: RESERVE
        timeStamp:
          type: string
          description: >-
            Timestamp in ISO-8601 representing when the operation was performed.
          example: '2018-12-12T11:18:38.246Z'
        transactionId:
          type: string
          description: 'Vipps transaction id, automatically generated by Vipps'
          example: '5001420062'
    TransactionInfo:
      type: object
      required:
        - amount
        - status
        - timeStamp
        - transactionId
        - transactionText
      properties:
        amount:
          type: number
          format: double
          description:
            'Ordered amount in øre. Amounts are specified in minor units. For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.'
          example: 49900
        status:
          type: string
          enum:
            - Cancelled
            - Captured
            - Refund
          example: Captured
          description: >-
            Status which gives the current state of the payment within Vipps.
            See the [API
            guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#responses-from-requests)
            for more information.
        timeStamp:
          type: string
          description: Timestamp in ISO-8601 representing when the order was performed.
          example: '2018-12-12T11:18:38.246Z'
        transactionId:
          type: string
          description: 'Vipps transaction id, automatically generated by Vipps'
          pattern: '^\d{10}$'
          example: '5001420062'
        transactionText:
          type: string
          description: Transaction text to be displayed in Vipps
          example: One pair of Vipps socks
          maxLength: 100
    TransactionInfoCancel:
      type: object
      required:
        - amount
        - status
        - timeStamp
        - transactionText
      properties:
        amount:
          type: number
          format: double
          description: >-
            Amounts are specified in minor units.
            For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
          example: 49900
          minimum: 100
        status:
          type: string
          enum:
            - Cancelled
            - Captured
            - Refund
          example: Captured
          description: >-
            Status which gives the current state of the payment within Vipps.
            See the [API
            guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#responses-from-requests)
            for more information.
        timeStamp:
          type: string
          description: Timestamp in ISO-8601 representing when the order was performed.
          example: '2018-12-12T11:18:38.246Z'
        transactionId:
          type: string
          description: 'Vipps transaction id, automatically generated by Vipps'
          pattern: '^\d{10}$'
          example: '5001420062'
        transactionText:
          type: string
          description: Transaction text to be displayed in Vipps
          example: One pair of Vipps socks
          maxLength: 100
    TransactionDetails:
      type: object
      properties:
        orderId:
          type: string
          description: >-
            Id which uniquely identifies a payment. Maximum length is 50
            alphanumeric characters: a-z, A-Z, 0-9 and '-'.
          example: acme-shop-123-order123abc
          pattern: '^[a-zA-Z0-9-]{1,50}$'
          maxLength: 50
        shippingDetails:
          $ref: '#/components/schemas/PaymentShippingDetails'
        transactionLogHistory:
          type: array
          description: Array of transaction operations. Sorted from newest to oldest.
          items:
            $ref: '#/components/schemas/TransactionLogHistory'
        transactionSummary:
          $ref: '#/components/schemas/TransactionSummary'
        userDetails:
          $ref: '#/components/schemas/UserDetails'
        sub:
          type: string
          description: >-
            The user identifier if using profile flow.
            This should be used against the userInfo endpoint: GET:/vipps-userinfo-api/userinfo/{sub}
            The `sub` is added asynchronously, so if the `/details` request
            is made within (milli)seconds of the payment approval in the app, it may not be
            available. If that happens, simply make another `/details` request.
    PaymentInitiationResponse:
      type: object
      required:
        - orderId
        - url
      properties:
        orderId:
          type: string
          description: >-
            Id which uniquely identifies a payment. Maximum length is 50
            alphanumeric characters: a-z, A-Z, 0-9 and '-'.
          example: acme-shop-123-order123abc
          pattern: '^[a-zA-Z0-9-]{1,50}$'
          maxLength: 50
        url:
          type: string
          description: >-
            URL to redirect the user to Vipps landing page or a deeplink URL to
            open Vipps app, if `isApp` was set as true. The landing page will
            also redirect a user to the app if the user is using a mobile browser.
            This link will timeout after 5 minutes.
            This .c is a shortened deeplink URL.
            The URL received from Vipps should not be changed, and the format may change without notice.
          example: 'https://api.vipps.no/dwo-api-application/v1/deeplink/vippsgateway?v=2&token=eyJraWQiOiJqd3RrZXkiLC <snip>'
    ShippingDetailsRequest:
      type: object
      required:
        - address
        - shippingCost
        - shippingMethod
        - shippingMethodId
      properties:
        address:
          $ref: '#/components/schemas/AddressExpress'
        shippingCost:
          type: number
          format: double
          description: 'Shipping cost, in øre. Amounts are specified in minor units. For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.'
          example: 9900
        shippingMethod:
          type: string
          description: >-
            The description of the shipping method.
            Typically the name of the shipping company and the name of their service.
            Max length: 256 characters.
            Recommended length for readability on most screens: 25 characters.
          example: Posten Servicepakke
          maxLength: 256
        shippingMethodId:
          type: string
          maxLength: 100
          example: posten-servicepakke
    RefundTransactionResponse:
      type: object
      required:
        - orderId
      properties:
        orderId:
          type: string
          description: >-
            Id which uniquely identifies a payment. Maximum length is 50
            alphanumeric characters: a-z, A-Z, 0-9 and '-'.
          example: acme-shop-123-order123abc
          pattern: '^[a-zA-Z0-9-]{1,50}$'
          maxLength: 50
        transaction:
          $ref: '#/components/schemas/TransactionInfo'
        transactionSummary:
          $ref: '#/components/schemas/TransactionSummary'
    TransactionResponse:
      type: object
      required:
        - orderId
      properties:
        paymentInstrument:
          type: string
          description: >-
            Text which describes what instrument was used to complete the payment.
            Not included until a user has chosen and approved in the app.
          example: Mastercard
          pattern: '^[a-zA-Z0-9-]{1,30}$'
          maxLength: 30
        orderId:
          type: string
          description: >-
            Id which uniquely identifies a payment. Maximum length is 50
            alphanumeric characters: a-z, A-Z, 0-9 and '-'.
          example: acme-shop-123-order123abc
          pattern: '^[a-zA-Z0-9-]{1,50}$'
          maxLength: 50
        transactionInfo:
          $ref: '#/components/schemas/TransactionInfo'
        transactionSummary:
          $ref: '#/components/schemas/TransactionSummary'
    CancelTransactionResponse:
      type: object
      required:
        - orderId
      properties:
        paymentInstrument:
          type: string
          description: >-
            Text which describes what instrument was used to complete the payment.
            Not included until a user has chosen and approved in the app.
          example: Mastercard
          pattern: '^[a-zA-Z0-9-]{1,30}$'
          maxLength: 30
        orderId:
          type: string
          description: >-
            Id which uniquely identifies a payment. Maximum length is 50
            alphanumeric characters: a-z, A-Z, 0-9 and '-'.
          example: acme-shop-123-order123abc
          pattern: '^[a-zA-Z0-9-]{1,50}$'
          maxLength: 50
        transactionInfo:
          $ref: '#/components/schemas/TransactionInfoCancel'
        transactionSummary:
          $ref: '#/components/schemas/TransactionSummary'
    MerchantInfoPayment:
      type: object
      required:
        - merchantSerialNumber
      properties:
        merchantSerialNumber:
          type: string
          description: >-
            Unique id for this merchant's sales channel: website, mobile app
            etc. Short name: MSN.
            Early MSNs were five digits, new ones are six digits.
          minLength: 5
          maxLength: 6
          example: '123456'
          pattern: '^\d{5,}$'
    ShippingDetails:
      type: object
      required:
        - isDefault
        - shippingCost
        - shippingMethod
        - shippingMethodId
      properties:
        isDefault:
          type: string
          enum:
            - 'Y'
            - 'N'
        priority:
          type: integer
          format: int32
        shippingCost:
          type: number
          format: double
          example: 9900
        shippingMethod:
          type: string
          description: >-
            The description of the shipping method.
            Typically the name of the shipping company and the name of their service.
            Max length: 256 characters.
            Recommended length for readability on most screens: 25 characters.
          example: Posten Servicepakke
          maxLength: 256
        shippingMethodId:
          type: string
          maxLength: 100
          example: posten-servicepakke
    InitiatePaymentCommand:
      type: object
      required:
        - customerInfo
        - merchantInfo
        - transaction
      properties:
        customerInfo:
          $ref: '#/components/schemas/CustomerInfo'
        merchantInfo:
          $ref: '#/components/schemas/MerchantInfo'
        transaction:
          $ref: '#/components/schemas/TransactionInfoInitiate'
    TransactionInfoInitiate:
      type: object
      required:
        - amount
        - orderId
        - transactionText
      properties:
        amount:
          type: integer
          format: int32
          description: >-
            Amounts are specified in minor units.
            For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
            Must be non-zero and larger than 1 NOK.
          pattern: '^\d{3,}$'
          minimum: 100
          example: 49900
        orderId:
          type: string
          description: >-
            Id which uniquely identifies a payment. Maximum length is 50
            alphanumeric characters: a-z, A-Z, 0-9 and '-'.
          example: acme-shop-123-order123abc
          pattern: '^[a-zA-Z0-9-]{1,50}$'
          maxLength: 50
        transactionText:
          type: string
          description: Transaction text to be displayed in Vipps
          example: One pair of Vipps socks
          maxLength: 100
        skipLandingPage:
          type: boolean
          example: false
          default: false
          description: Skips the landing page for whitelisted sale units. Requires a valid customerInfo.mobileNumber.
        scope:
          type: string
          description: The requested OIDC scope for use with userinfo
          example: 'name address email'
          enum:
            - name
            - address
            - email
            - phoneNumber
            - birthDate
            - nin
            - accountNumbers
        additionalData:
          $ref: '#/components/schemas/AdditionalTransactionData'
        useExplicitCheckoutFlow:
          type: boolean
          description: Use the extended UX flow for express checkout which forces users to confirm their address and shipping choices
          example: true
    AdditionalTransactionData:
      type: object
      required:
        - passengerName
        - airlineCode
        - airlineDesignatorCode
        - ticketNumber
        - agencyInvoiceNumber
      properties:
        passengerName:
          type: string
          description: Passenger name, initials, and a title.
          format: last name + first name or initials + title.
          example: FLYER / MARY MS.
          minLength: 1
          maxLength: 49
        airlineCode:
          type: string
          description: IATA 3-digit accounting code (PAX); numeric. It identifies the carrier. eg KLM = 074
          format: IATA 3-digit accounting code (PAX)
          example: '074'
          minLength: 3
          maxLength: 3
        airlineDesignatorCode:
          type: string
          description: "IATA 2-letter accounting code (PAX); alphabetical. It identifies the carrier. Eg KLM = KL. IATA: https://www.iata.org/en/youandiata/airports/"
          format: IATA 2-letter airline code
          example: 'KL'
          minLength: 2
          maxLength: 2
        ticketNumber:
          type: string
          description: The ticket's unique identifier.
          minLength: 1
          maxLength: 150
          example: "074-5799804843"
        agencyInvoiceNumber:
          type: string
          description: "Reference number for the invoice, issued by the agency. IATA: https://www.iata.org/en/youandiata/travel-agents/"
          minLength: 1
          maxLength: 6
          example: "123456"
    MerchantInfo:
      type: object
      required:
        - callbackPrefix
        - fallBack
        - merchantSerialNumber
      properties:
        authToken:
          type: string
          description: >-
            Authorization token that the merchant could share to make callbacks
            more secure. If provided, this token will be returned as an
            `Authorization` header for our callbacks. This includes shipping
            details and callback.
          maxLength: 255
          example: iOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6ImllX3FXQ1hoWHh0MXpJ
        callbackPrefix:
          type: string
          description: >-
            This is an URL for Vipps to call at the merchant's server to provide
            updated information about the order after the payment request.
            Domain name and context path should be provided by merchant as the
            value for this parameter. Vipps will add `/v2/payments/{orderId}` to
            the end or this URL.
            URLs passed to Vipps must validate, see
            [URL validation](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#url-validation).
            We don't send requests to all ports, so to be safe use common ports such as: 80, 443, 8080.
            The URL must use HTTPS.
          maxLength: 255
          example: 'https://example.com/vipps/callbacks-for-payment-updates'
        consentRemovalPrefix:
          type: string
          description: >-
            Required for Vipps Hurtigkasse (express checkout) payments. This callback URL will be
            used by Vipps to inform the merchant that the user has revoked
            his/her consent: This Vipps user does not want the merchant to
            store or use his/her personal information any longer. Required by GDPR.
            Vipps will add `/v2/consents/{userId}` to the end or this URL.
            URLs passed to Vipps must validate, see
            [URL validation](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#url-validation).
            We don't send requests to all ports, so to be safe use common ports such as: 80, 443, 8080.
            The URL must use HTTPS.
          maxLength: 255
          example: 'https://example.com/vipps/consent-removal'
        fallBack:
          type: string
          description: >-
            Vipps will use the fallBack URL to redirect the Vipps user to the
            merchant’s confirmation page once the payment is completed in Vipps.
            This is normally the “success page”, although the “fallback” name
            is ambiguous (the same URL is also used if payment was not successful).
            In other words: This is the URL Vipps sends the Vipps user back to.
            URLs passed to Vipps must validate, see
            [URL validation](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#url-validation).
            The URL must use HTTPS, or a custom URL scheme like "myapp://"".
          maxLength: 255
          example: 'https://example.com/vipps/fallback-order-result-page/acme-shop-123-order123abc'
        isApp:
          type: boolean
          example: false
          default: false
          description: >-
            This parameter indicates whether payment request is triggered from
            Mobile App or Web browser. Based on this value, response will be
            redirect URL for Vipps landing page or deeplink URL to connect vipps
            App. When isApp is set to true, URLs passed to Vipps will not be
            validated as regular URLs.
        merchantSerialNumber:
          type: string
          description: >-
            Unique id for this merchant's sales channel: website, mobile app
            etc. Short name: MSN.
            Early MSNs were five digits, new ones are six digits.
          minLength: 5
          maxLength: 6
          example: '123456'
          pattern: '^\d{5,}$'
        paymentType:
          type: string
          description: >-
            This parameter will identify difference between a regular ecommerce
            payment and an ecommerce express payment. For Vipps Hurtigkasse (express checkout), use: "eComm
            Express Payment". Express checkouts require `consentRemovalPrefix`. 
            Note, use the value exactly as it is shown below (i.e., "eComm" with two m's). 
          enum:
            - eComm Regular Payment
            - eComm Express Payment
          example: eComm Regular Payment
          default: eComm Regular Payment
        shippingDetailsPrefix:
          type: string
          description: >-
            In case of Vipps Hurtigkasse (express checkout) payment, merchant should pass this
            prefix to let Vipps fetch shipping cost and method related details.
            Vipps will add `/v2/payments/{orderId}/shippingDetails` to the end
            or this URL.
            We don't send requests to all ports, so to be safe use common ports such as: 80, 443, 8080.
          maxLength: 255
          example: 'https://example.com/vipps/shipping'
        staticShippingDetails:
          type: array
          items:
            $ref: '#/components/schemas/ShippingDetails'
          description: >-
            If shipping method and cost are always a fixed value, for example 50 NOK,
            then the method and price can be provided during the initiate call.
            The shippingDetailsPrefix callback will not be used if this value is provided.
            This will result in a faster checkout and a better customer experience.
    PaymentStatus:
      type: object
      properties:
        orderId:
          type: string
          description: >-
            Id which uniquely identifies a payment. Maximum length is 50
            alphanumeric characters: a-z, A-Z, 0-9 and '-'.
          example: acme-shop-123-order123abc
          pattern: '^[a-zA-Z0-9-]{1,50}$'
          maxLength: 50
        transactionInfo:
          $ref: '#/components/schemas/OrderStatusInfoTransactionInfo'
    Transaction:
      type: object
      required:
        - transactionText
      properties:
        amount:
          type: integer
          format: int32
          description: >-
            Amounts are specified in minor units.
            For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
            If amount is 0 or not provided then full capture will be performed.
          pattern: '^\d{3,}$'
          example: 49900
          minimum: 100
        transactionText:
          type: string
          description: Transaction text to be displayed in Vipps
          example: One pair of Vipps socks
          maxLength: 100
    ShippingCostAndMethod:
      type: object
      required:
        - addressId
        - addressLine1
        - city
        - country
        - postCode
      properties:
        addressId:
          type: integer
          format: int32
          description: >-
            Vipps Provided address Id. To be returned in response in the same
            field
          example: 100
        addressLine1:
          type: string
          example: Robert Levins gate 5
        addressLine2:
          type: string
          example: c/o Rune Garborg
        city:
          type: string
          description: City
          example: Oslo
        country:
          type: string
          description: The only country supported is Norway
          default: 'NO'
          example: 'NO'
        postCode:
          type: string
          description: Four digits for Norway.
          pattern: '^\d{4}$'
          example: '0154'
        addressType:
          type: string
          description: 'The type of address: Home, Work, Other.'
          pattern: '^\[A-Z]$'
          enum:
            - 'H'
            - 'W'
            - 'O'
          default: 'H'
          example: H
    CustomerInfo:
      type: object
      properties:
        mobileNumber:
          type: string
          description: >-
            Mobile number of the user who has to pay for the transaction from
            Vipps. Allowed format: xxxxxxxx. No country code.
          minLength: 8
          maxLength: 8
          example: 91234567
          pattern: '^\d{8}$'
    CancelPaymentActionRequest:
      type: object
      properties:
        merchantInfo:
          $ref: '#/components/schemas/MerchantInfoPayment'
        transaction:
          $ref: '#/components/schemas/CancelTransaction'
        shouldReleaseRemainingFunds:
          type: boolean
          description: An opt-in field to instruct the release of remaining funds after a partial capture.
          default: false
      required:
        - merchantInfo
        - transaction
    AuthorizePaymentRequest:
      type: object
      properties:
        merchantInfo:
          $ref: '#/components/schemas/MerchantInfoPayment'
    ExpressCheckOutPaymentRequest:
      type: object
      required:
        - merchantSerialNumber
        - orderId
        - shippingDetails
        - userDetails
        - transactionInfo
      properties:
        merchantSerialNumber:
          type: string
          description: >-
            Unique id for this merchant's sales channel: website, mobile app
            etc. Short name: MSN.
            Early MSNs were five digits, new ones are six digits.
          minLength: 5
          maxLength: 6
          example: '123456'
          pattern: '^\d{5,}$'
        orderId:
          type: string
          description: >-
            Id which uniquely identifies a payment. Maximum length is 50
            alphanumeric characters: a-z, A-Z, 0-9 and '-'.
          example: acme-shop-123-order123abc
          pattern: '^[a-zA-Z0-9-]{1,50}$'
          maxLength: 50
        shippingDetails:
          $ref: '#/components/schemas/ShippingDetailsRequest'
        transactionInfo:
          $ref: '#/components/schemas/CallbackTransactionInfoExpress'
        userDetails:
          $ref: '#/components/schemas/UserDetails'
        errorInfo:
          $ref: '#/components/schemas/Error'
    RegularCheckOutPaymentRequest:
      type: object
      required:
        - merchantSerialNumber
        - orderId
        - transactionInfo
      properties:
        merchantSerialNumber:
          type: string
          description: >-
            Unique id for this merchant's sales channel: website, mobile app
            etc. Short name: MSN.
            Early MSNs were five digits, new ones are six digits.
          minLength: 5
          maxLength: 6
          example: '123456'
          pattern: '^\d{5,}$'
        orderId:
          type: string
          description: >-
            Id which uniquely identifies a payment. Maximum length is 50
            alphanumeric characters: a-z, A-Z, 0-9 and '-'.
          example: acme-shop-123-order123abc
          pattern: '^[a-zA-Z0-9-]{1,50}$'
          maxLength: 50
        transactionInfo:
          $ref: '#/components/schemas/CallbackTransactionInfoRegular'
        errorInfo:
          $ref: '#/components/schemas/Error'
    AuthorizationTokenResponse:
      type: object
      required:
        - token_type
        - expires_in
        - ext_expires_in
        - expires_on
        - not_before
        - resource
        - access_token
      properties:
        token_type:
          type: string
          description: String containing the type for the Access Token.
          example: Bearer
        expires_in:
          type: integer
          description: Token expiry time in seconds.
          example: 3600
        ext_expires_in:
          type: integer
          description: Extra time added to expiry time. Currently disabled.
          example: 3600
        expires_on:
          type: integer
          description: Token expiry time in epoch time format.
          example: 1547823408
        not_before:
          type: integer
          description: Token creation time in epoch time format.
          example: 1547819508
        resource:
          type: string
          description: A common resource object. Not used in token validation
          example: 00000002-0000-0000-c000-000000000000
        access_token:
          type: string
          format: byte
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1Ni..."
    FetchShippingCostResponse:
      type: object
      required:
        - addressId
        - orderId
        - shippingDetails
      properties:
        addressId:
          type: integer
          format: int32
        orderId:
          type: string
          description: >-
            Id which uniquely identifies a payment. Maximum length is 50
            alphanumeric characters: a-z, A-Z, 0-9 and '-'.
          example: acme-shop-123-order123abc
          pattern: '^[a-zA-Z0-9-]{1,50}$'
          maxLength: 50
        shippingDetails:
          type: array
          items:
            $ref: '#/components/schemas/ShippingDetails'
    TransactionSummary:
      type: object
      required:
        - capturedAmount
        - refundedAmount
        - remainingAmountToCapture
        - remainingAmountToRefund
      properties:
        capturedAmount:
          type: integer
          format: int32
          description: Total amount captured
          example: 49900
        refundedAmount:
          type: integer
          format: int32
          description: Total refunded amount of the order
          example: 0
        remainingAmountToCapture:
          type: integer
          format: int32
          description: Total remaining amount to capture
          example: 0
        remainingAmountToRefund:
          type: integer
          format: int32
          description: Total remaining amount to refund
          example: 49900
        bankIdentificationNumber:
          type: integer
          format: int32
          description: Bank Identification Number, first 6 digit of card number
          example: 123456
    TransactionUpdateCallbackOneOf:
      oneOf:
        - $ref: '#/components/schemas/ExpressCheckOutPaymentRequest'
        - $ref: '#/components/schemas/RegularCheckOutPaymentRequest'
    UserinfoError:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: string
        detail:
          type: string
        instance:
          type: string
        extraInfo:
          type: object
          additionalProperties:
            type: object
    ErrorObject:
      type: object
      required:
        - responseInfo
        - result
      properties:
        responseInfo:
          type: object
          required:
            - responseCode
            - responseMessage
          properties:
            responseCode:
              type: integer
              example: 401
            responseMessage:
              type: string
        result:
          type: object
          required:
            - message
          properties:
            message:
              type: string
              description: "A description of what went wrong. See https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#errors"
              example: "Refused by issuer because of expired card"
    Error:
      type: object
      required:
        - errorGroup
        - errorCode
        - errorMessage
      properties:
        errorGroup:
          type: string
          description: "The error group. See: https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#error-groups"
          enum:
            - Authentication
            - Payments
            - InvalidRequest
            - VippsError
            - User
            - Merchant
          example: "Payments"
        errorCode:
          type: string
          description: "The error code. See: https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#error-codes"
          example: "44"
        errorMessage:
          type: string
          description: "A description of what went wrong. See https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#errors"
          example: "Refused by issuer because of expired card"
        contextId:
          type: string
          description: "A unique id for this error, useful for searching in logs"
          example: f70b8bf7-c843-4bea-95d9-94725b19895f
    ErrorArray:
      type: array
      items:
        $ref: '#/components/schemas/Error'
  responses:
    Default:
      description: Possible error responses. See [Responses](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#url-validation).
      content:
        application/json;charset=UTF-8:
          schema:
            oneOf:
              - $ref: '#/components/schemas/ErrorArray'
              - $ref: '#/components/schemas/ErrorObject'
