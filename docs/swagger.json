{
  "openapi": "3.0.0",
  "info": {
    "description": "# Vipps eCommerce API\nAdditional API documentation: https://github.com/vippsas/vipps-ecom-api/\n",
    "version": "1.0.19",
    "title": "Vipps eCommerce API"
  },
  "tags": [
    {
      "name": "Authorization Service",
      "description": "Authorization Service"
    },
    {
      "name": "Vipps eCom API",
      "description": "Functionality provided by the Vipps eCommerce API"
    },
    {
      "name": "Endpoints required by Vipps from the merchant",
      "description": "These endpoints must be implemented by the merchant, and are called by Vipps."
    }
  ],
  "servers": [
    {
      "url": "https://apitest.vipps.no"
    },
    {
      "url": "https://api.vipps.no"
    }
  ],
  "paths": {
    "/accesstoken/get": {
      "post": {
        "tags": [
          "Authorization Service"
        ],
        "summary": "Fetch Authorization token",
        "parameters": [
          {
            "name": "client_id",
            "in": "header",
            "description": "Client id is available on portal.vipps.no, under the 'Utvikler' tab.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "description": "Client secret is available on portal.vipps.no, under the 'Utvikler' tab.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "The subscription-key for Authorization token is available on portal.vipps.no, under the 'Utvikler' tab.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Authorization token API endpoint helps to get the JWT Bearer token that needs to be passed in every API request in the Authorization header. The merchant application use the API to get a JWT access token. JWT access token is a base 64 encoded string value that must be aquire first before making any Vipps api calls",
        "operationId": "fetchAuthorizationTokenUsingPost",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "401": {
            "description": "Unauthorized"
          },
          "402": {
            "description": "Payment Failed"
          },
          "403": {
            "description": "Request Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          },
          "405": {
            "description": "Request method not supported"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "500": {
            "description": "A server-side error"
          }
        }
      }
    },
    "[consentRemovalPrefix]/v2/consents/{userId}": {
      "delete": {
        "tags": [
          "Endpoints required by Vipps from the merchant"
        ],
        "summary": "Remove User Consent (for express checkout)",
        "description": "This API endpoint on the merchant side allows Vipps to send consent removal requests to the merchant. When receiving requests the merchant is obliged to remove the user details permanently, as per the GDPR guidelines. Vipps will add `/v2/consents/{userId}` to the end of this URL. URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html). We don't send requests to all ports, so to be safe use common ports such as: 80, 443, 8080.",
        "operationId": "removeUserConsentUsingDELETE",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "URL encoded userId provided when requesting user information from Vipps. Received by callback or get detail request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Remove User Consent (for express checkout)"
          }
        }
      }
    },
    "[shippingDetailsPrefix]/v2/payments/{orderId}/shippingDetails": {
      "post": {
        "tags": [
          "Endpoints required by Vipps from the merchant"
        ],
        "summary": "Fetch Shipping Cost & Method (for express checkout)",
        "description": "This API endpoint on the merchant side allows Vipps to get the shipping cost and method based on the provided address and product details. The primary use of this service is Vipps Hurtigkasse (express checkout) where Vipps needs to present shipping cost and method to the Vipps user. Vipps will add `/v2/payments/{orderId}/shippingDetails` to the end of this URL. Vipps has a *10 second timeout* for these requests, and thus requires a quick reply from the merchant's server for successful payments. URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html). We don't send requests to all ports, so to be safe use common ports such as: 80, 443, 8080.",
        "operationId": "fetchShippingCostUsingPOST",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "orderId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Token provided by the merchant in initiate payment request as `authToken`. Used so that the merchant may authenticate the request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/FetchShippingCostAndMethod"
              }
            }
          },
          "description": "fetchShippingCostAndMethod",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Fetch Shipping Cost & Method.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/FetchShippingCostResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ecomm/v2/payments": {
      "post": {
        "tags": [
          "Vipps eCom API"
        ],
        "summary": "Initiate Payment",
        "description": "This API call allows the merchants to initiate payments. In order to identify which sales channel payments are coming from, a merchantSerialNumber is used to distinguish between them. Please note that a single payment is uniquely identified by a composite of merchantSerialNumber and orderId. The merchant-provided orderId must be unique per sales channel. Once the transaction is successfully initiated in Vipps, you will receive a URL in response which will direct the customer to the Vipps landing page. The landing page detects if the requests comes from a mobile browser or desktop browser. The merchant may also pass the 'isApp' parameter that will make Vipps respond with a app-switch deeplink that will take the customer directly to the Vipps app. URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html).",
        "operationId": "initiatePaymentV3UsingPOST",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization-token is obtained by appending the access_token obtained by using the /accesstoken/get request to 'Bearer '.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Content-Type",
            "description": "application/json",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Ocp-Apim-Subscription-Key",
            "description": "The subscription-key for your product is available on portal.vipps.no, under the 'Utvikler' tab.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/InitiatePaymentCommand"
              }
            }
          },
          "description": "initiatePaymentCommand",
          "required": true
        },
        "callbacks": {
          "callbackExpress": {
            "{$request.body#/merchantInfo/callbackPrefix}/v2/payments/{$request.body#/transaction/orderId}": {
              "post": {
                "summary": "Callback : Transaction Update",
                "description": "This API call allows Vipps to send the transaction details. During regular ecomm payment order and transaction details will be shared. During express checkout payment it will provide user details and shipping details addition to the order and transaction details. Vipps will add `/v2/payments/{orderId}` to the end of this URL. URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html). We don't send requests to all ports, so to be safe use common ports such as: 80, 443, 8080.",
                "operationId": "InitiatePaymentTransactionUpdateCallbackForRegularPaymentUsingPOSTExpress",
                "parameters": [
                  {
                    "name": "orderId",
                    "in": "path",
                    "description": "orderId",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Vipps does not require a response for this request."
                  }
                },
                "requestBody": {
                  "content": {
                    "application/json;charset=UTF-8": {
                      "schema": {
                        "$ref": "#/components/schemas/ExpressCheckOutPaymentRequest"
                      }
                    }
                  }
                }
              }
            }
          },
          "callbackRegular": {
            "{$request.body#/merchantInfo/callbackPrefix}/v2/payments/{$request.body#/transaction/orderId}": {
              "post": {
                "summary": "Callback : Transaction Update",
                "description": "This API call allows Vipps to send the transaction details. During regular ecomm payment order and transaction details will be shared. During express checkout payment it will provide user details and shipping details addition to the order and transaction details. Vipps will add `/v2/payments/{orderId}` to the end of this URL. URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html). We don't send requests to all ports, so to be safe use common ports such as: 80, 443, 8080.",
                "operationId": "InitiatePaymentTransactionUpdateCallbackForRegularPaymentUsingPOSTExpress",
                "parameters": [
                  {
                    "name": "orderId",
                    "in": "path",
                    "description": "orderId",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Vipps does not require a response for this request."
                  }
                },
                "requestBody": {
                  "content": {
                    "application/json;charset=UTF-8": {
                      "schema": {
                        "$ref": "#/components/schemas/RegularCheckOutPaymentRequest"
                      }
                    }
                  }
                }
              }
            }
          },
          "consentRemoval": {
            "{$request.body#/merchantInfo/consentRemovalPrefix}/v2/consents/{userId}": {
              "delete": {
                "summary": "Remove User Consent (for express checkout)",
                "description": "This API endpoint on the merchant side allows Vipps to send consent removal requests to merchant. When receiving requests the merchant is obliged to remove the user details permanently, as per the GDPR guidelines. Vipps will add `/v2/consents/{userId}` to the end of this URL. URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html).  We don't send requests to all ports, so to be safe use common ports such as: 80, 443, 8080.",
                "operationId": "removeUserConsentUsingDELETE",
                "parameters": [
                  {
                    "name": "userId",
                    "in": "path",
                    "description": "URL encoded userId provided when requesting user information from Vipps. Received by callback or get detail request.",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "OK"
                  }
                }
              }
            }
          },
          "shippingDetails": {
            "{$request.body#/merchantInfo/shippingDetailsPrefix}/v2/payments/{$request.body#/transaction/orderId}/shippingDetails": {
              "post": {
                "summary": "Fetch Shipping Cost & Method (for express checkout)",
                "description": "This API endpoint on the merchant side allows Vipps to get the shipping cost and method based on the provided address and product details. The primary use of this service is Vipps Hurtigkasse (express checkout) where Vipps needs to present shipping cost and method to the Vipps user. Vipps will add `/v2/payments/{orderId}/shippingDetails` to the end of this URL. Vipps has a *10 second timeout* for these requests, and thus requires a quick reply from the merchant's server for successful payments. URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html). We don't send requests to all ports, so to be safe use common ports such as: 80, 443, 8080.",
                "operationId": "fetchShippingCostUsingPOST",
                "parameters": [
                  {
                    "name": "orderId",
                    "in": "path",
                    "description": "orderId",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Fetch Shipping Cost & Method.",
                    "content": {
                      "application/json;charset=UTF-8": {
                        "schema": {
                          "$ref": "#/components/schemas/FetchShippingCostResponse"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "content": {
                    "application/json;charset=UTF-8": {
                      "schema": {
                        "$ref": "#/components/schemas/FetchShippingCostAndMethod"
                      }
                    }
                  },
                  "description": "fetchShippingCostAndMethod",
                  "required": true
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response for Initiate Payment",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/InitiatePaymentV2Representation"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "401": {
            "description": "Unauthorized"
          },
          "402": {
            "description": "Payment Failed"
          },
          "403": {
            "description": "Request Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          },
          "405": {
            "description": "Request method not supported"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "500": {
            "description": "A server-side error"
          }
        }
      }
    },
    "[callbackPrefix]/v2/payments/{orderId}": {
      "post": {
        "tags": [
          "Endpoints required by Vipps from the merchant"
        ],
        "summary": "Callback : Transaction Update",
        "description": "This API call allows Vipps to send the transaction details. During regular ecomm payment order and transaction details will be shared. During express checkout payment it will provide user details and shipping details addition to the order and transaction details. Vipps will add `/v2/payments/{orderId}` to the end of this URL. URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html). We don't send requests to all ports, so to be safe use common ports such as: 80, 443, 8080.",
        "operationId": "transactionUpdateCallbackForRegularPaymentUsingPOST",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "orderId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Token provided by the merchant in initiate payment request as `authToken`. Used so that the merchant may authenticate the request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/TransactionUpdateCallbackOneOf"
              }
            }
          },
          "description": "The body of the request made by Vipps. It will differ if the request is a regular or express payment.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "All ok"
          }
        }
      }
    },
    "/ecomm/v2/payments/{orderId}/capture": {
      "post": {
        "tags": [
          "Vipps eCom API"
        ],
        "summary": "Capture Payment ",
        "description": "This API call allows merchant to capture the reserved amount. Amount to capture cannot be higher than reserved. The API also allows capturing partial amount of the reserved amount. Partial capture can be called as many times as required so long there is reserved amount to capture. Transaction text is not optional and is used as a proof of delivery (tracking code, consignment number etc.). In a case of direct capture, both fund reservation and capture are executed in a single operation.",
        "operationId": "capturePaymentUsingPOST",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Order id specified in the request body of initiate payment.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization-token is obtained by running the /accesstoken/get request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Content-Type",
            "description": "`application/json`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Ocp-Apim-Subscription-Key",
            "description": "The subscription-key for your product is available on portal.vipps.no, under the 'Utvikler' tab.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "X-Request-Id",
            "description": "Id used for making requests idempotent. Adding this ID will allow the merchant to retry requests without it making additional changes. Unique for orderId, merchantSerialNumber and endpoint. Max 30 characters.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PaymentActionsRequest"
        },
        "responses": {
          "200": {
            "description": "Capture payment response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponseCapture"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "401": {
            "description": "Unauthorized"
          },
          "402": {
            "description": "Payment Failed"
          },
          "403": {
            "description": "Request Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          },
          "405": {
            "description": "Request method not supported"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "500": {
            "description": "A server-side error"
          }
        }
      }
    },
    "/ecomm/v2/payments/{orderId}/cancel": {
      "put": {
        "tags": [
          "Vipps eCom API"
        ],
        "summary": "Cancel Payment",
        "description": "The API call allows merchant to cancel the reserved transaction, The API will not allow partial cancellation which has the consequence that partially captured transactions cannot be cancelled. Please note that in a case of communication errors during initiate payment service call between Vipps and PSP/Acquirer/Issuer; even in a case that customer has confirmed a payment, the payment will be cancelled by Vipps. Note this means you can not cancel a captured payment.",
        "operationId": "cancelPaymentRequestUsingPUT",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Order id specified in the request body of initiate payment.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization-token is obtained by running the /accesstoken/get request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Content-Type",
            "description": "`application/json`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Ocp-Apim-Subscription-Key",
            "description": "The subscription-key for your product is available on portal.vipps.no, under the 'Utvikler' tab.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/CancelPaymentActionRequest"
              }
            }
          },
          "description": "paymentActionsRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Cancel payment response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponseCancel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "401": {
            "description": "Unauthorized"
          },
          "402": {
            "description": "Payment Failed"
          },
          "403": {
            "description": "Request Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          },
          "405": {
            "description": "Request method not supported"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "500": {
            "description": "A server-side error"
          }
        }
      }
    },
    "/ecomm/v2/payments/{orderId}/refund": {
      "post": {
        "tags": [
          "Vipps eCom API"
        ],
        "summary": "Refund Payment ",
        "description": "The API allows a merchant to do a refund of already captured transaction. There is an option to do a partial refund of the captured amount. Refunded amount cannot be larger than captured. Timeframe for issuing a refund for a payment is 365 days from the date payment has been captured. If the refund payment service call is called after the refund timeframe, service call will respond with an error. Refunded funds will be transferred from the merchant account to the customer credit card that was used in payment flow. Pay attention that in order to perform refund, there must be enough funds at merchant settlements account.",
        "operationId": "refundPaymentUsingPOST",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Order id specified in the request body of initiate payment.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization-token is obtained by running the /accesstoken/get request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Content-Type",
            "description": "`application/json`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Ocp-Apim-Subscription-Key",
            "description": "The subscription-key for your product is available on portal.vipps.no, under the 'Utvikler' tab.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "X-Request-Id",
            "description": "Id used for making requests idempotent. Adding this ID will allow the merchant to retry requests without it making additional changes. Unique for orderId, merchantSerialNumber and endpoint. Max 30 characters.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PaymentActionsRequest"
        },
        "responses": {
          "200": {
            "description": "Refund payment response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponseRefund"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "401": {
            "description": "Unauthorized"
          },
          "402": {
            "description": "Payment Failed"
          },
          "403": {
            "description": "Request Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          },
          "405": {
            "description": "Request method not supported"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "500": {
            "description": "A server-side error"
          }
        }
      }
    },
    "/ecomm/v2/payments/{orderId}/details": {
      "get": {
        "tags": [
          "Vipps eCom API"
        ],
        "summary": "Get payment Details",
        "description": "This API call allows merchant to get the details of a payment transaction. Service call returns detailed transaction history of given payment where events are sorted from newest to oldest for when the transaction occurred.",
        "operationId": "getPaymentDetailsUsingGET",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Order id specified in the request body of initiate payment.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization-token is obtained by running the `/accesstoken/get` request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Content-Type",
            "description": "`application/json`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Ocp-Apim-Subscription-Key",
            "description": "The subscription-key for your product is available on portal.vipps.no, under the 'Utvikler' tab.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get payment Details",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "401": {
            "description": "Unauthorized"
          },
          "402": {
            "description": "Payment Failed"
          },
          "403": {
            "description": "Request Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          },
          "405": {
            "description": "Request method not supported"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "500": {
            "description": "A server-side error"
          }
        }
      }
    },
    "/ecomm/v2/payments/{orderId}/status": {
      "get": {
        "deprecated": true,
        "tags": [
          "Vipps eCom API"
        ],
        "summary": "Get order status",
        "description": "This API call allows the merchant to get the status of the last payment transaction. Primarily use of this service is meant for inApp where simple response to check order status is preferred.",
        "operationId": "getOrderStatusUsingGET",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Order id specified in the request body of initiate payment.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization-token is obtained by running the /accesstoken/get request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Ocp-Apim-Subscription-Key",
            "description": "The subscription-key for your product is available on portal.vipps.no, under the 'Utvikler' tab.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get order status",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "401": {
            "description": "Unauthorized"
          },
          "402": {
            "description": "Payment Failed"
          },
          "403": {
            "description": "Request Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          },
          "405": {
            "description": "Request method not supported"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "500": {
            "description": "A server-side error"
          }
        }
      }
    }
  },
  "components": {
    "requestBodies": {
      "PaymentActionsRequest": {
        "content": {
          "application/json;charset=UTF-8": {
            "schema": {
              "$ref": "#/components/schemas/PaymentActionsRequest"
            }
          }
        },
        "description": "paymentActionsRequest",
        "required": true
      }
    },
    "schemas": {
      "PaymentActionsRequest": {
        "type": "object",
        "properties": {
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfoPayment"
          },
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          }
        }
      },
      "Address": {
        "type": "object",
        "required": [
          "addressLine1",
          "city",
          "country",
          "postCode"
        ],
        "properties": {
          "addressLine1": {
            "type": "string",
            "description": "Address Line 1",
            "example": "Robert Levins gate 5"
          },
          "addressLine2": {
            "type": "string",
            "description": "Address Line 2",
            "example": "Att: Rune Garborg"
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "Oslo"
          },
          "country": {
            "type": "string",
            "description": "Country",
            "example": "Norway",
            "enum": [
              "Norway"
            ]
          },
          "postCode": {
            "type": "string",
            "description": "Post Code",
            "example": 108
          }
        }
      },
      "AddressExpress": {
        "type": "object",
        "required": [
          "addressLine1",
          "city",
          "country",
          "postCode"
        ],
        "properties": {
          "addressLine1": {
            "type": "string",
            "description": "Address Line 1",
            "example": "Robert Levins gate 5"
          },
          "addressLine2": {
            "type": "string",
            "description": "Address Line 2",
            "example": "Att: Rune Garborg"
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "Oslo"
          },
          "country": {
            "type": "string",
            "description": "Country",
            "example": "Norway",
            "enum": [
              "Norway"
            ]
          },
          "zipCode": {
            "type": "string",
            "description": "Post Code",
            "example": 108
          }
        }
      },
      "PaymentShippingDetails": {
        "type": "object",
        "required": [
          "shippingCost",
          "shippingMethod",
          "shippingMethodId"
        ],
        "properties": {
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "shippingCost": {
            "type": "number",
            "format": "double",
            "description": "Shipping Cost",
            "example": 1500
          },
          "shippingMethod": {
            "type": "string",
            "description": "Shipping method. Max length: 256 characters. Recommended length for readability on most screens: 25 characters.",
            "example": "Posten Servicepakke",
            "maxLength": 256
          },
          "shippingMethodId": {
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "TransactionLogHistory": {
        "type": "object",
        "required": [
          "operation",
          "amount",
          "operationSuccess",
          "transactionText"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "operation": {
            "type": "string",
            "example": "RESERVE",
            "description": "The operation that was performed for this log entry. See the [API guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#responses-from-requests) for more information.",
            "enum": [
              "INITIATE",
              "RESERVE",
              "SALE",
              "CAPTURE",
              "REFUND",
              "CANCEL",
              "VOID"
            ]
          },
          "operationSuccess": {
            "type": "boolean",
            "description": "If the corrosponding operation was successfull.",
            "example": true
          },
          "requestId": {
            "description": "The idempotent request id provided by the merchant for the operation.",
            "example": 12983921873981899000,
            "type": "string"
          },
          "timeStamp": {
            "type": "string",
            "description": "Timestamp in ISO-8601 representing when the operation was perfomed.",
            "example": "2019-02-05T12:27:42.311Z"
          },
          "transactionId": {
            "description": "Identifies the transaction",
            "example": 5001446662,
            "type": "string"
          },
          "transactionText": {
            "type": "string",
            "description": "Transaction text to be displayed in Vipps",
            "example": "One pair of Vipps socks",
            "maxLength": 100
          }
        }
      },
      "CancelTransaction": {
        "type": "object",
        "properties": {
          "transactionText": {
            "type": "string",
            "description": "Transaction text to be displayed in Vipps",
            "example": "One pair of Vipps socks",
            "maxLength": 100
          }
        }
      },
      "UserDetails": {
        "type": "object",
        "required": [
          "email",
          "firstName",
          "lastName",
          "mobileNumber",
          "userId"
        ],
        "properties": {
          "bankIdVerified": {
            "type": "string",
            "description": "Optional Y/N string indicating if the user in bankId vertified, must be requested during onboarding.",
            "example": "Y",
            "enum": [
              "Y",
              "N"
            ]
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Optional date of birth infomation, must be requested during onboarding.",
            "example": "12-3-1988"
          },
          "email": {
            "type": "string",
            "description": "Email address",
            "example": "user@example.com"
          },
          "firstName": {
            "type": "string",
            "description": "First name",
            "example": "Ada"
          },
          "lastName": {
            "type": "string",
            "description": "Last name",
            "example": "Lovelace"
          },
          "mobileNumber": {
            "type": "string",
            "description": "Mobile number",
            "example": "12345678",
            "minLength": 8,
            "maxLength": 12,
            "pattern": "^\\d{8,12}$"
          },
          "ssn": {
            "type": "string",
            "description": "Optional social security number for the user, must be requested during onboarding.",
            "example": "12345678901",
            "minLength": 11,
            "maxLength": 11,
            "pattern": "^\\d{11}$"
          },
          "userId": {
            "type": "string",
            "example": "uiJskNQ6qNN1iwN891uuob==",
            "maxLength": 50,
            "description": "Identifies a user in Vipps. Merchant is required to store this field for future references.",
            "pattern": "^[\\d\\w\\/=+]+$"
          }
        }
      },
      "callbackErrorInfo": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "example": "45",
            "description": "The number code for the error."
          },
          "errorGroup": {
            "type": "string",
            "example": "PAYMENTS"
          },
          "errorMessage": {
            "type": "string",
            "description": "Description of the error",
            "example": "User has cancelled or not acted upon the payment"
          }
        }
      },
      "CallbackTransactionInfoStatus": {
        "type": "object",
        "required": [
          "amount",
          "status",
          "timeStamp",
          "transactionId"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Ordered amount in øre",
            "example": 20000
          },
          "status": {
            "type": "string",
            "enum": [
              "RESERVE",
              "SALE",
              "CANCELLED",
              "REJECTED",
              "AUTO_CANCEL"
            ],
            "description": "Status which gives the current state of the payment within Vipps. See the [API guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#callbacks) for more information.",
            "example": "RESERVE"
          },
          "timeStamp": {
            "type": "string",
            "description": "Timestamp in ISO-8601 representing when the operation was performed.",
            "example": "2018-12-12T11:18:38.246Z"
          },
          "transactionId": {
            "type": "string",
            "description": "Vipps transaction id",
            "example": "5001420062"
          }
        }
      },
      "OrderStatusInfoTransactionInfo": {
        "type": "object",
        "required": [
          "amount",
          "status",
          "timeStamp",
          "transactionId"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Ordered amount in øre",
            "example": 20000
          },
          "status": {
            "type": "string",
            "enum": [
              "INITIATE",
              "REGISTER",
              "RESERVE",
              "SALE",
              "CAPTURE",
              "REFUND",
              "CANCEL",
              "VOID",
              "FAILED",
              "REJECTED"
            ],
            "description": "Status which gives the current state of the payment within Vipps. See the [API guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#responses-from-requests) for more information.",
            "example": "RESERVE"
          },
          "timeStamp": {
            "type": "string",
            "description": "Timestamp in ISO-8601 representing when the status operation was performed.",
            "example": "2018-12-12T11:18:38.246Z"
          },
          "transactionId": {
            "type": "string",
            "description": "Vipps transaction id",
            "example": "5001420062"
          }
        }
      },
      "TransactionInfoCancel": {
        "type": "object",
        "required": [
          "amount",
          "status",
          "timeStamp",
          "transactionId",
          "transactionText"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Ordered amount in øre",
            "example": 20000
          },
          "status": {
            "type": "string",
            "enum": [
              "Cancelled"
            ],
            "example": "Cancelled",
            "description": "Status which gives the current state of the payment within Vipps. See the [API guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#responses-from-requests) for more information."
          },
          "timeStamp": {
            "type": "string",
            "description": "Timestamp in ISO-8601 representing when the order was cancelled.",
            "example": "2018-12-12T11:18:38.246Z"
          },
          "transactionId": {
            "type": "string",
            "description": "Vipps transaction id",
            "example": "5001420062"
          },
          "transactionText": {
            "type": "string",
            "description": "Transaction text to be displayed in Vipps",
            "example": "One pair of Vipps socks",
            "maxLength": 100
          }
        }
      },
      "TransactionInfoRefund": {
        "type": "object",
        "required": [
          "amount",
          "status",
          "timeStamp",
          "transactionId",
          "transactionText"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Ordered amount in øre",
            "example": 20000
          },
          "status": {
            "type": "string",
            "enum": [
              "Refund"
            ],
            "example": "Refund",
            "description": "Status which gives the current state of the payment within Vipps. See the [API guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#responses-from-requests) for more information."
          },
          "timeStamp": {
            "type": "string",
            "description": "Timestamp in ISO-8601 representing when the order was refunded.",
            "example": "2018-12-12T11:18:38.246Z"
          },
          "transactionId": {
            "type": "string",
            "description": "Vipps transaction id",
            "example": "5001420062"
          },
          "transactionText": {
            "type": "string",
            "description": "Transaction text to be displayed in Vipps",
            "example": "One pair of Vipps socks",
            "maxLength": 100
          }
        }
      },
      "TransactionInfoCapture": {
        "type": "object",
        "required": [
          "amount",
          "status",
          "timeStamp",
          "transactionId",
          "transactionText"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Ordered amount in øre",
            "example": 20000
          },
          "status": {
            "type": "string",
            "enum": [
              "Captured"
            ],
            "example": "Captured",
            "description": "Status which gives the current state of the payment within Vipps. See the [API guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#responses-from-requests) for more information."
          },
          "timeStamp": {
            "type": "string",
            "description": "Timestamp in ISO-8601 representing when the order was captured.",
            "example": "2018-12-12T11:18:38.246Z"
          },
          "transactionId": {
            "type": "string",
            "description": "Vipps transaction id",
            "example": "5001420062"
          },
          "transactionText": {
            "type": "string",
            "description": "Transaction text to be displayed in Vipps",
            "example": "One pair of Vipps socks",
            "maxLength": 100
          }
        }
      },
      "GetTransactionDetails": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Id which uniquely identifies a payment. Maximum length is 30 alphanumeric characters: a-z, A-Z, 0-9 and '-'.",
            "example": "order123abc",
            "pattern": "^[a-zA-Z0-9-]{1,30}$",
            "maxLength": 30
          },
          "shippingDetails": {
            "$ref": "#/components/schemas/PaymentShippingDetails"
          },
          "transactionLogHistory": {
            "type": "array",
            "description": "Array of transaction operations. Sorted from newest to oldest.",
            "items": {
              "$ref": "#/components/schemas/TransactionLogHistory"
            }
          },
          "transactionSummary": {
            "$ref": "#/components/schemas/TransactionSummary"
          },
          "userDetails": {
            "$ref": "#/components/schemas/UserDetails"
          }
        }
      },
      "InitiatePaymentV2Representation": {
        "type": "object",
        "required": [
          "orderId",
          "url"
        ],
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Id which uniquely identifies a payment. Maximum length is 30 alphanumeric characters: a-z, A-Z, 0-9 and '-'.",
            "example": "order123abc",
            "pattern": "^[a-zA-Z0-9-]{1,30}$",
            "maxLength": 30
          },
          "url": {
            "type": "string",
            "description": "URL to redirect the user to Vipps landing page or a deeplink URL to open Vipps app, if isApp was set as true. The landing page will also redirect a user to the app if the user is using a mobile browser. This link will timeout after 5 minutes.",
            "example": "https://example.com"
          }
        }
      },
      "ShippingDetailsRequest": {
        "type": "object",
        "required": [
          "address",
          "shippingCost",
          "shippingMethod",
          "shippingMethodId"
        ],
        "properties": {
          "address": {
            "$ref": "#/components/schemas/AddressExpress"
          },
          "shippingCost": {
            "type": "number",
            "format": "double",
            "description": "Shipping cost"
          },
          "shippingMethod": {
            "type": "string",
            "description": "Shipping method. Max length: 256 characters. Recommended length for readability on most screens: 25 characters.",
            "example": "Posten Servicepakke",
            "maxLength": 256
          },
          "shippingMethodId": {
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "TransactionResponseCancel": {
        "type": "object",
        "required": [
          "orderId"
        ],
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Id which uniquely identifies a payment. Maximum length is 30 alphanumeric characters: a-z, A-Z, 0-9 and '-'.",
            "example": "order123abc",
            "pattern": "^[a-zA-Z0-9-]{1,30}$",
            "maxLength": 30
          },
          "transactionInfo": {
            "$ref": "#/components/schemas/TransactionInfoCancel"
          },
          "transactionSummary": {
            "$ref": "#/components/schemas/TransactionSummary"
          }
        }
      },
      "TransactionResponseCapture": {
        "type": "object",
        "required": [
          "orderId"
        ],
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Id which uniquely identifies a payment. Maximum length is 30 alphanumeric characters: a-z, A-Z, 0-9 and '-'.",
            "example": "order123abc",
            "pattern": "^[a-zA-Z0-9-]{1,30}$",
            "maxLength": 30
          },
          "transactionInfo": {
            "$ref": "#/components/schemas/TransactionInfoCapture"
          },
          "transactionSummary": {
            "$ref": "#/components/schemas/TransactionSummary"
          }
        }
      },
      "TransactionResponseRefund": {
        "type": "object",
        "required": [
          "orderId"
        ],
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Id which uniquely identifies a payment. Maximum length is 30 alphanumeric characters: a-z, A-Z, 0-9 and '-'.",
            "example": "order123abc",
            "pattern": "^[a-zA-Z0-9-]{1,30}$",
            "maxLength": 30
          },
          "transaction": {
            "$ref": "#/components/schemas/TransactionInfoRefund"
          },
          "transactionSummary": {
            "$ref": "#/components/schemas/TransactionSummary"
          }
        }
      },
      "MerchantInfoPayment": {
        "type": "object",
        "required": [
          "merchantSerialNumber"
        ],
        "properties": {
          "merchantSerialNumber": {
            "type": "string",
            "description": "Unique id for this merchant's sales channel: website, mobile app etc. Short name: MSN.",
            "minLength": 6,
            "maxLength": 6,
            "example": 123456,
            "pattern": "^\\d{6}$"
          }
        }
      },
      "ShippingDetails": {
        "type": "object",
        "required": [
          "isDefault",
          "shippingCost",
          "shippingMethod",
          "shippingMethodId"
        ],
        "properties": {
          "isDefault": {
            "type": "string",
            "enum": [
              "Y",
              "N"
            ]
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "shippingCost": {
            "type": "number",
            "format": "double"
          },
          "shippingMethod": {
            "type": "string",
            "description": "Shipping method. Max length: 256 characters. Recommended length for readability on most screens: 25 characters.",
            "example": "Posten Servicepakke",
            "maxLength": 256
          },
          "shippingMethodId": {
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "InitiatePaymentCommand": {
        "type": "object",
        "required": [
          "customerInfo",
          "merchantInfo",
          "transaction"
        ],
        "properties": {
          "customerInfo": {
            "$ref": "#/components/schemas/CustomerInfoDto"
          },
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfoDto"
          },
          "transaction": {
            "$ref": "#/components/schemas/TransactionInfoInitiateDTO"
          }
        }
      },
      "TransactionInfoInitiateDTO": {
        "type": "object",
        "required": [
          "amount",
          "orderId",
          "transactionText"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int32",
            "description": "Amount in øre. 32 bit Integer (2147483647). Must be non-zero.",
            "pattern": "^\\d{3,}$",
            "example": 20000
          },
          "orderId": {
            "type": "string",
            "description": "Id which uniquely identifies a payment. Maximum length is 30 alphanumeric characters: a-z, A-Z, 0-9 and '-'.",
            "example": "order123abc",
            "pattern": "^[a-zA-Z0-9-]{1,30}$",
            "maxLength": 30
          },
          "timeStamp": {
            "type": "string",
            "format": "date-time",
            "description": "ISO formatted date time string.",
            "example": "2018-11-14T15:44:26.590Z"
          },
          "transactionText": {
            "type": "string",
            "description": "Transaction text to be displayed in Vipps",
            "example": "One pair of Vipps socks",
            "maxLength": 100
          },
          "skipLandingPage": {
            "type": "boolean",
            "example": false,
            "default": false,
            "description": "Skips the landing page for whitelisted sale units. Requires a valid customerInfo.mobileNumber."
          }
        }
      },
      "MerchantInfoDto": {
        "type": "object",
        "required": [
          "callbackPrefix",
          "fallBack",
          "merchantSerialNumber"
        ],
        "properties": {
          "authToken": {
            "type": "string",
            "description": "Authorization token that the merchant could share to make callbacks more secure. If provided this token will be returned as an `Authorization` header for our callbacks. This includes shipping details and callback.",
            "maxLength": 255,
            "example": "iOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6ImllX3FXQ1hoWHh0MXpJ"
          },
          "callbackPrefix": {
            "type": "string",
            "description": "This is an URL for Vipps to call at the merchant's server to provide updated information about the order after the payment request. Domain name and context path should be provided by merchant as the value for this parameter. Vipps will add `/v2/payments/{orderId}` to the end or this URL. URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html). We don't send requests to all ports, so to be safe use common ports such as: 80, 443, 8080.",
            "maxLength": 255,
            "example": "https://example.com/vipps/callbacks-for-payment-update"
          },
          "consentRemovalPrefix": {
            "type": "string",
            "description": "Required for express checkout payments. This callback URL will be used by Vipps to inform the merchant that the user has revoked his/her consent: This Vipps user does do not want the merchant to store or use his/her personal information anymore. Required by GDPR. Vipps will add `/v2/consents/{userId}` to the end or this URL. URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html). We don't send requests to all ports, so to be safe use common ports such as: 80, 443, 8080.",
            "maxLength": 255,
            "example": "https://example.com/vipps"
          },
          "fallBack": {
            "type": "string",
            "description": "Vipps will use the fallBack URL to redirect the Vipps user to the merchant’s confirmation page once the payment is completed in Vipps. This is normally the “success page”, although the “fallback” name is ambiguous (the same URL is also used if payment was not successful). In other words: This is the URL Vipps sends the Vipps user back to. URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html).",
            "maxLength": 255,
            "example": "https://example.com/vipps/fallback-result-page/order123abc"
          },
          "isApp": {
            "type": "boolean",
            "example": false,
            "default": false,
            "description": "This parameter indicates whether payment request is triggered from Mobile App or Web browser. Based on this value, response will be redirect URL for Vipps landing page or deeplink URL to connect vipps App. When isApp is set to true, URLs passed to Vipps will not be validated as regular URLs."
          },
          "merchantSerialNumber": {
            "type": "string",
            "description": "Unique id for this merchant's sales channel: website, mobile app etc. Short name: MSN.",
            "minLength": 6,
            "maxLength": 6,
            "example": 123456,
            "pattern": "^\\d{6}$"
          },
          "paymentType": {
            "type": "string",
            "description": "This parameter will identify difference between a regular ecomm payment and ecomm express payment. For express checkout, use: \"eComm Express Payment\". Express checkouts require `consentRemovalPrefix`.",
            "enum": [
              "eComm Regular Payment",
              "eComm Express Payment"
            ],
            "example": "eComm Regular Payment",
            "default": "eComm Regular Payment"
          },
          "shippingDetailsPrefix": {
            "type": "string",
            "description": "In case of express checkout payment, merchant should pass this prefix to let Vipps fetch shipping cost and method related details. Vipps will add `/v2/payments/{orderId}/shippingDetails` to the end or this URL. We don't send requests to all ports, so to be safe use common ports such as: 80, 443, 8080.",
            "maxLength": 255,
            "example": "https://example.com/vipps/shipping/"
          },
          "staticShippingDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingDetails"
            },
            "description": "If shipping method and cost are always a fixed value, for example 50kr, then the method and price can be provided during the initiate call. The shippingDetailsPrefix callback will not be used if this value is provided."
          }
        }
      },
      "GetPaymentStatusResponse": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Id which uniquely identifies a payment. Maximum length is 30 alphanumeric characters: a-z, A-Z, 0-9 and '-'.",
            "example": "order123abc",
            "pattern": "^[a-zA-Z0-9-]{1,30}$",
            "maxLength": 30
          },
          "transactionInfo": {
            "$ref": "#/components/schemas/OrderStatusInfoTransactionInfo"
          }
        }
      },
      "Transaction": {
        "type": "object",
        "required": [
          "transactionText"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int32",
            "description": "Amount in øre, if amount is 0 or not provided then full capture will be performed. 32 Bit Integer (2147483647)",
            "pattern": "^\\d{3,}$",
            "example": 20000
          },
          "transactionText": {
            "type": "string",
            "description": "Transaction text to be displayed in Vipps",
            "example": "One pair of Vipps socks",
            "maxLength": 100
          }
        }
      },
      "FetchShippingCostAndMethod": {
        "type": "object",
        "required": [
          "addressId",
          "addressLine1",
          "city",
          "country",
          "postCode"
        ],
        "properties": {
          "addressId": {
            "type": "integer",
            "format": "int32",
            "description": "Vipps Provided address Id. To be returned in response in the same field"
          },
          "addressLine1": {
            "type": "string",
            "example": "Robert Levins gate 5"
          },
          "addressLine2": {
            "type": "string"
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "Oslo"
          },
          "country": {
            "type": "string",
            "description": "The only country supported is Norway",
            "default": "NO",
            "example": "NO"
          },
          "postCode": {
            "type": "string",
            "description": "Four digits for Norway.",
            "pattern": "^\\d{4}$",
            "example": "0154"
          },
          "addressType": {
            "type": "string",
            "description": "The type of address: Home, business.",
            "pattern": "^\\[A-Z]$",
            "enum": [
              "H",
              "B"
            ],
            "example": "H"
          }
        }
      },
      "CustomerInfoDto": {
        "type": "object",
        "properties": {
          "mobileNumber": {
            "type": "string",
            "description": "Mobile number of the user who has to pay for the transation from Vipps. Allowed format: xxxxxxxx. No country code.",
            "minLength": 8,
            "maxLength": 8,
            "example": 91234567,
            "pattern": "^\\d{8}$"
          }
        }
      },
      "CancelPaymentActionRequest": {
        "type": "object",
        "properties": {
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfoPayment"
          },
          "transaction": {
            "$ref": "#/components/schemas/CancelTransaction"
          }
        }
      },
      "ExpressCheckOutPaymentRequest": {
        "type": "object",
        "required": [
          "merchantSerialNumber",
          "orderId",
          "shippingDetails",
          "userDetails",
          "transactionInfo"
        ],
        "properties": {
          "merchantSerialNumber": {
            "type": "string",
            "description": "Unique id for this merchant's sales channel: website, mobile app etc. Short name: MSN.",
            "minLength": 6,
            "maxLength": 6,
            "example": 123456,
            "pattern": "^\\d{6}$"
          },
          "orderId": {
            "type": "string",
            "description": "Id which uniquely identifies a payment. Maximum length is 30 alphanumeric characters: a-z, A-Z, 0-9 and '-'.",
            "example": "order123abc",
            "pattern": "^[a-zA-Z0-9-]{1,30}$",
            "maxLength": 30
          },
          "shippingDetails": {
            "$ref": "#/components/schemas/ShippingDetailsRequest"
          },
          "transactionInfo": {
            "$ref": "#/components/schemas/CallbackTransactionInfoStatus"
          },
          "userDetails": {
            "$ref": "#/components/schemas/UserDetails"
          },
          "errorInfo": {
            "$ref": "#/components/schemas/callbackErrorInfo"
          }
        }
      },
      "RegularCheckOutPaymentRequest": {
        "type": "object",
        "required": [
          "merchantSerialNumber",
          "orderId",
          "transactionInfo"
        ],
        "properties": {
          "merchantSerialNumber": {
            "type": "string",
            "description": "Unique id for this merchant's sales channel: website, mobile app etc. Short name: MSN.",
            "minLength": 6,
            "maxLength": 6,
            "example": 123456,
            "pattern": "^\\d{6}$"
          },
          "orderId": {
            "type": "string",
            "description": "Id which uniquely identifies a payment. Maximum length is 30 alphanumeric characters: a-z, A-Z, 0-9 and '-'.",
            "example": "order123abc",
            "pattern": "^[a-zA-Z0-9-]{1,30}$",
            "maxLength": 30
          },
          "transactionInfo": {
            "$ref": "#/components/schemas/CallbackTransactionInfoStatus"
          },
          "errorInfo": {
            "$ref": "#/components/schemas/callbackErrorInfo"
          }
        }
      },
      "AuthorizationTokenResponse": {
        "type": "object",
        "required": [
          "token_type",
          "expires_in",
          "ext_expires_in",
          "expires_on",
          "not_before",
          "resource",
          "access_token"
        ],
        "properties": {
          "token_type": {
            "type": "string",
            "description": "String containing the type for the Access Token.",
            "example": "Bearer"
          },
          "expires_in": {
            "type": "integer",
            "description": "Token expiry time in seconds.",
            "example": 3600
          },
          "ext_expires_in": {
            "type": "integer",
            "description": "Extra time added to expiry time. Currently disabled.",
            "example": 3600
          },
          "expires_on": {
            "type": "integer",
            "description": "Token expiry time in epoch time format.",
            "example": 1547823408
          },
          "not_before": {
            "type": "integer",
            "description": "Token creation time in epoch time format.",
            "example": 1547819508
          },
          "resource": {
            "type": "string",
            "description": "A common resource object. Not used in token validation",
            "example": "00000002-0000-0000-c000-000000000000"
          },
          "access_token": {
            "type": "string",
            "format": "byte",
            "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1Ni"
          }
        }
      },
      "FetchShippingCostResponse": {
        "type": "object",
        "required": [
          "addressId",
          "orderId",
          "shippingDetails"
        ],
        "properties": {
          "addressId": {
            "type": "integer",
            "format": "int32"
          },
          "orderId": {
            "type": "string",
            "description": "Id which uniquely identifies a payment. Maximum length is 30 alphanumeric characters: a-z, A-Z, 0-9 and '-'.",
            "example": "order123abc",
            "pattern": "^[a-zA-Z0-9-]{1,30}$",
            "maxLength": 30
          },
          "shippingDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingDetails"
            }
          }
        }
      },
      "TransactionSummary": {
        "type": "object",
        "required": [
          "capturedAmount",
          "refundedAmount",
          "remainingAmountToCapture",
          "remainingAmountToRefund"
        ],
        "properties": {
          "capturedAmount": {
            "type": "integer",
            "format": "int32",
            "description": "Total amount captured",
            "example": 20000
          },
          "refundedAmount": {
            "type": "integer",
            "format": "int32",
            "description": "Total refunded amount of the order",
            "example": 0
          },
          "remainingAmountToCapture": {
            "type": "integer",
            "format": "int32",
            "description": "Total remaining amount to capture",
            "example": 0
          },
          "remainingAmountToRefund": {
            "type": "integer",
            "format": "int32",
            "description": "Total remaining amount to refund",
            "example": 20000
          },
          "bankIdentificationNumber": {
            "type": "string",
            "description": "Bank Identification Number, first 6 digit of card number",
            "example": 123456
          }
        }
      },
      "TransactionUpdateCallbackOneOf": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ExpressCheckOutPaymentRequest"
          },
          {
            "$ref": "#/components/schemas/RegularCheckOutPaymentRequest"
          }
        ]
      }
    }
  }
}
